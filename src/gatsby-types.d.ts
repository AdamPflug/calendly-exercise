/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type AboutHero = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type AboutHeroConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutHeroEdge>;
  readonly group: ReadonlyArray<AboutHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutHeroConnection_distinctArgs = {
  field: AboutHeroFieldSelector;
};


type AboutHeroConnection_groupArgs = {
  field: AboutHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutHeroConnection_maxArgs = {
  field: AboutHeroFieldSelector;
};


type AboutHeroConnection_minArgs = {
  field: AboutHeroFieldSelector;
};


type AboutHeroConnection_sumArgs = {
  field: AboutHeroFieldSelector;
};

type AboutHeroEdge = {
  readonly next: Maybe<AboutHero>;
  readonly node: AboutHero;
  readonly previous: Maybe<AboutHero>;
};

type AboutHeroFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type AboutHeroFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type AboutHeroGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutHeroEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AboutHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutHeroGroupConnection_distinctArgs = {
  field: AboutHeroFieldSelector;
};


type AboutHeroGroupConnection_groupArgs = {
  field: AboutHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutHeroGroupConnection_maxArgs = {
  field: AboutHeroFieldSelector;
};


type AboutHeroGroupConnection_minArgs = {
  field: AboutHeroFieldSelector;
};


type AboutHeroGroupConnection_sumArgs = {
  field: AboutHeroFieldSelector;
};

type AboutHeroSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type AboutLeadership = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<AboutProfile>>>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly subhead: Maybe<Scalars['String']>;
};

type AboutLeadershipConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutLeadershipEdge>;
  readonly group: ReadonlyArray<AboutLeadershipGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutLeadership>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutLeadershipConnection_distinctArgs = {
  field: AboutLeadershipFieldSelector;
};


type AboutLeadershipConnection_groupArgs = {
  field: AboutLeadershipFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutLeadershipConnection_maxArgs = {
  field: AboutLeadershipFieldSelector;
};


type AboutLeadershipConnection_minArgs = {
  field: AboutLeadershipFieldSelector;
};


type AboutLeadershipConnection_sumArgs = {
  field: AboutLeadershipFieldSelector;
};

type AboutLeadershipEdge = {
  readonly next: Maybe<AboutLeadership>;
  readonly node: AboutLeadership;
  readonly previous: Maybe<AboutLeadership>;
};

type AboutLeadershipFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<AboutProfileFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly subhead: InputMaybe<FieldSelectorEnum>;
};

type AboutLeadershipFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<AboutProfileFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly subhead: InputMaybe<StringQueryOperatorInput>;
};

type AboutLeadershipGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutLeadershipEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AboutLeadershipGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutLeadership>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutLeadershipGroupConnection_distinctArgs = {
  field: AboutLeadershipFieldSelector;
};


type AboutLeadershipGroupConnection_groupArgs = {
  field: AboutLeadershipFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutLeadershipGroupConnection_maxArgs = {
  field: AboutLeadershipFieldSelector;
};


type AboutLeadershipGroupConnection_minArgs = {
  field: AboutLeadershipFieldSelector;
};


type AboutLeadershipGroupConnection_sumArgs = {
  field: AboutLeadershipFieldSelector;
};

type AboutLeadershipSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<AboutProfileSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly subhead: InputMaybe<SortOrderEnum>;
};

type AboutLogoList = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly logos: Maybe<ReadonlyArray<Maybe<HomepageLogo>>>;
  readonly parent: Maybe<Node>;
};

type AboutLogoListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutLogoListEdge>;
  readonly group: ReadonlyArray<AboutLogoListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutLogoList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutLogoListConnection_distinctArgs = {
  field: AboutLogoListFieldSelector;
};


type AboutLogoListConnection_groupArgs = {
  field: AboutLogoListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutLogoListConnection_maxArgs = {
  field: AboutLogoListFieldSelector;
};


type AboutLogoListConnection_minArgs = {
  field: AboutLogoListFieldSelector;
};


type AboutLogoListConnection_sumArgs = {
  field: AboutLogoListFieldSelector;
};

type AboutLogoListEdge = {
  readonly next: Maybe<AboutLogoList>;
  readonly node: AboutLogoList;
  readonly previous: Maybe<AboutLogoList>;
};

type AboutLogoListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly logos: InputMaybe<HomepageLogoFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type AboutLogoListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly logos: InputMaybe<HomepageLogoFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type AboutLogoListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutLogoListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AboutLogoListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutLogoList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutLogoListGroupConnection_distinctArgs = {
  field: AboutLogoListFieldSelector;
};


type AboutLogoListGroupConnection_groupArgs = {
  field: AboutLogoListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutLogoListGroupConnection_maxArgs = {
  field: AboutLogoListFieldSelector;
};


type AboutLogoListGroupConnection_minArgs = {
  field: AboutLogoListFieldSelector;
};


type AboutLogoListGroupConnection_sumArgs = {
  field: AboutLogoListFieldSelector;
};

type AboutLogoListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly logos: InputMaybe<HomepageLogoSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type AboutPage = {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageBlock>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type AboutPageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutPageEdge>;
  readonly group: ReadonlyArray<AboutPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutPageConnection_distinctArgs = {
  field: AboutPageFieldSelector;
};


type AboutPageConnection_groupArgs = {
  field: AboutPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutPageConnection_maxArgs = {
  field: AboutPageFieldSelector;
};


type AboutPageConnection_minArgs = {
  field: AboutPageFieldSelector;
};


type AboutPageConnection_sumArgs = {
  field: AboutPageFieldSelector;
};

type AboutPageEdge = {
  readonly next: Maybe<AboutPage>;
  readonly node: AboutPage;
  readonly previous: Maybe<AboutPage>;
};

type AboutPageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageBlockFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type AboutPageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageBlockFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type AboutPageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutPageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AboutPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutPageGroupConnection_distinctArgs = {
  field: AboutPageFieldSelector;
};


type AboutPageGroupConnection_groupArgs = {
  field: AboutPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutPageGroupConnection_maxArgs = {
  field: AboutPageFieldSelector;
};


type AboutPageGroupConnection_minArgs = {
  field: AboutPageFieldSelector;
};


type AboutPageGroupConnection_sumArgs = {
  field: AboutPageFieldSelector;
};

type AboutPageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageBlockSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type AboutProfile = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly jobTitle: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type AboutProfileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutProfileEdge>;
  readonly group: ReadonlyArray<AboutProfileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutProfile>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutProfileConnection_distinctArgs = {
  field: AboutProfileFieldSelector;
};


type AboutProfileConnection_groupArgs = {
  field: AboutProfileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutProfileConnection_maxArgs = {
  field: AboutProfileFieldSelector;
};


type AboutProfileConnection_minArgs = {
  field: AboutProfileFieldSelector;
};


type AboutProfileConnection_sumArgs = {
  field: AboutProfileFieldSelector;
};

type AboutProfileEdge = {
  readonly next: Maybe<AboutProfile>;
  readonly node: AboutProfile;
  readonly previous: Maybe<AboutProfile>;
};

type AboutProfileFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jobTitle: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type AboutProfileFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jobTitle: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type AboutProfileFilterListInput = {
  readonly elemMatch: InputMaybe<AboutProfileFilterInput>;
};

type AboutProfileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutProfileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AboutProfileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutProfile>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutProfileGroupConnection_distinctArgs = {
  field: AboutProfileFieldSelector;
};


type AboutProfileGroupConnection_groupArgs = {
  field: AboutProfileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutProfileGroupConnection_maxArgs = {
  field: AboutProfileFieldSelector;
};


type AboutProfileGroupConnection_minArgs = {
  field: AboutProfileFieldSelector;
};


type AboutProfileGroupConnection_sumArgs = {
  field: AboutProfileFieldSelector;
};

type AboutProfileSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jobTitle: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type AboutStat = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly label: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly value: Maybe<Scalars['String']>;
};

type AboutStatConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutStatEdge>;
  readonly group: ReadonlyArray<AboutStatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutStat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutStatConnection_distinctArgs = {
  field: AboutStatFieldSelector;
};


type AboutStatConnection_groupArgs = {
  field: AboutStatFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutStatConnection_maxArgs = {
  field: AboutStatFieldSelector;
};


type AboutStatConnection_minArgs = {
  field: AboutStatFieldSelector;
};


type AboutStatConnection_sumArgs = {
  field: AboutStatFieldSelector;
};

type AboutStatEdge = {
  readonly next: Maybe<AboutStat>;
  readonly node: AboutStat;
  readonly previous: Maybe<AboutStat>;
};

type AboutStatFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type AboutStatFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type AboutStatFilterListInput = {
  readonly elemMatch: InputMaybe<AboutStatFilterInput>;
};

type AboutStatGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutStatEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AboutStatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutStat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutStatGroupConnection_distinctArgs = {
  field: AboutStatFieldSelector;
};


type AboutStatGroupConnection_groupArgs = {
  field: AboutStatFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutStatGroupConnection_maxArgs = {
  field: AboutStatFieldSelector;
};


type AboutStatGroupConnection_minArgs = {
  field: AboutStatFieldSelector;
};


type AboutStatGroupConnection_sumArgs = {
  field: AboutStatFieldSelector;
};

type AboutStatList = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<AboutStat>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type AboutStatListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutStatListEdge>;
  readonly group: ReadonlyArray<AboutStatListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutStatList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutStatListConnection_distinctArgs = {
  field: AboutStatListFieldSelector;
};


type AboutStatListConnection_groupArgs = {
  field: AboutStatListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutStatListConnection_maxArgs = {
  field: AboutStatListFieldSelector;
};


type AboutStatListConnection_minArgs = {
  field: AboutStatListFieldSelector;
};


type AboutStatListConnection_sumArgs = {
  field: AboutStatListFieldSelector;
};

type AboutStatListEdge = {
  readonly next: Maybe<AboutStatList>;
  readonly node: AboutStatList;
  readonly previous: Maybe<AboutStatList>;
};

type AboutStatListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<AboutStatFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type AboutStatListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<AboutStatFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type AboutStatListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutStatListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AboutStatListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutStatList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutStatListGroupConnection_distinctArgs = {
  field: AboutStatListFieldSelector;
};


type AboutStatListGroupConnection_groupArgs = {
  field: AboutStatListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutStatListGroupConnection_maxArgs = {
  field: AboutStatListFieldSelector;
};


type AboutStatListGroupConnection_minArgs = {
  field: AboutStatListFieldSelector;
};


type AboutStatListGroupConnection_sumArgs = {
  field: AboutStatListFieldSelector;
};

type AboutStatListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<AboutStatSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type AboutStatSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type ContentfulAboutHero = AboutHero & HomepageBlock & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulAboutHeroConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutHeroEdge>;
  readonly group: ReadonlyArray<ContentfulAboutHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutHeroConnection_distinctArgs = {
  field: ContentfulAboutHeroFieldSelector;
};


type ContentfulAboutHeroConnection_groupArgs = {
  field: ContentfulAboutHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutHeroConnection_maxArgs = {
  field: ContentfulAboutHeroFieldSelector;
};


type ContentfulAboutHeroConnection_minArgs = {
  field: ContentfulAboutHeroFieldSelector;
};


type ContentfulAboutHeroConnection_sumArgs = {
  field: ContentfulAboutHeroFieldSelector;
};

type ContentfulAboutHeroEdge = {
  readonly next: Maybe<ContentfulAboutHero>;
  readonly node: ContentfulAboutHero;
  readonly previous: Maybe<ContentfulAboutHero>;
};

type ContentfulAboutHeroFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAboutHeroFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAboutHeroGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutHeroEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAboutHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutHeroGroupConnection_distinctArgs = {
  field: ContentfulAboutHeroFieldSelector;
};


type ContentfulAboutHeroGroupConnection_groupArgs = {
  field: ContentfulAboutHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutHeroGroupConnection_maxArgs = {
  field: ContentfulAboutHeroFieldSelector;
};


type ContentfulAboutHeroGroupConnection_minArgs = {
  field: ContentfulAboutHeroFieldSelector;
};


type ContentfulAboutHeroGroupConnection_sumArgs = {
  field: ContentfulAboutHeroFieldSelector;
};

type ContentfulAboutHeroSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulAboutLeadership = AboutLeadership & HomepageBlock & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<AboutProfile>>>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly subhead: Maybe<Scalars['String']>;
};

type ContentfulAboutLeadershipConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutLeadershipEdge>;
  readonly group: ReadonlyArray<ContentfulAboutLeadershipGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutLeadership>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutLeadershipConnection_distinctArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
};


type ContentfulAboutLeadershipConnection_groupArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutLeadershipConnection_maxArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
};


type ContentfulAboutLeadershipConnection_minArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
};


type ContentfulAboutLeadershipConnection_sumArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
};

type ContentfulAboutLeadershipEdge = {
  readonly next: Maybe<ContentfulAboutLeadership>;
  readonly node: ContentfulAboutLeadership;
  readonly previous: Maybe<ContentfulAboutLeadership>;
};

type ContentfulAboutLeadershipFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<AboutProfileFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly subhead: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAboutLeadershipFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<AboutProfileFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly subhead: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAboutLeadershipGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutLeadershipEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAboutLeadershipGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutLeadership>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutLeadershipGroupConnection_distinctArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
};


type ContentfulAboutLeadershipGroupConnection_groupArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutLeadershipGroupConnection_maxArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
};


type ContentfulAboutLeadershipGroupConnection_minArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
};


type ContentfulAboutLeadershipGroupConnection_sumArgs = {
  field: ContentfulAboutLeadershipFieldSelector;
};

type ContentfulAboutLeadershipSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<AboutProfileSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly subhead: InputMaybe<SortOrderEnum>;
};

type ContentfulAboutLogoList = AboutLogoList & HomepageBlock & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly logos: Maybe<ReadonlyArray<Maybe<HomepageLogo>>>;
  readonly parent: Maybe<Node>;
};

type ContentfulAboutLogoListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutLogoListEdge>;
  readonly group: ReadonlyArray<ContentfulAboutLogoListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutLogoList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutLogoListConnection_distinctArgs = {
  field: ContentfulAboutLogoListFieldSelector;
};


type ContentfulAboutLogoListConnection_groupArgs = {
  field: ContentfulAboutLogoListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutLogoListConnection_maxArgs = {
  field: ContentfulAboutLogoListFieldSelector;
};


type ContentfulAboutLogoListConnection_minArgs = {
  field: ContentfulAboutLogoListFieldSelector;
};


type ContentfulAboutLogoListConnection_sumArgs = {
  field: ContentfulAboutLogoListFieldSelector;
};

type ContentfulAboutLogoListEdge = {
  readonly next: Maybe<ContentfulAboutLogoList>;
  readonly node: ContentfulAboutLogoList;
  readonly previous: Maybe<ContentfulAboutLogoList>;
};

type ContentfulAboutLogoListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly logos: InputMaybe<HomepageLogoFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulAboutLogoListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly logos: InputMaybe<HomepageLogoFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulAboutLogoListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutLogoListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAboutLogoListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutLogoList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutLogoListGroupConnection_distinctArgs = {
  field: ContentfulAboutLogoListFieldSelector;
};


type ContentfulAboutLogoListGroupConnection_groupArgs = {
  field: ContentfulAboutLogoListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutLogoListGroupConnection_maxArgs = {
  field: ContentfulAboutLogoListFieldSelector;
};


type ContentfulAboutLogoListGroupConnection_minArgs = {
  field: ContentfulAboutLogoListFieldSelector;
};


type ContentfulAboutLogoListGroupConnection_sumArgs = {
  field: ContentfulAboutLogoListFieldSelector;
};

type ContentfulAboutLogoListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly logos: InputMaybe<HomepageLogoSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulAboutPage = AboutPage & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageBlock>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type ContentfulAboutPageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutPageEdge>;
  readonly group: ReadonlyArray<ContentfulAboutPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutPageConnection_distinctArgs = {
  field: ContentfulAboutPageFieldSelector;
};


type ContentfulAboutPageConnection_groupArgs = {
  field: ContentfulAboutPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutPageConnection_maxArgs = {
  field: ContentfulAboutPageFieldSelector;
};


type ContentfulAboutPageConnection_minArgs = {
  field: ContentfulAboutPageFieldSelector;
};


type ContentfulAboutPageConnection_sumArgs = {
  field: ContentfulAboutPageFieldSelector;
};

type ContentfulAboutPageEdge = {
  readonly next: Maybe<ContentfulAboutPage>;
  readonly node: ContentfulAboutPage;
  readonly previous: Maybe<ContentfulAboutPage>;
};

type ContentfulAboutPageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageBlockFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAboutPageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageBlockFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAboutPageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutPageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAboutPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutPageGroupConnection_distinctArgs = {
  field: ContentfulAboutPageFieldSelector;
};


type ContentfulAboutPageGroupConnection_groupArgs = {
  field: ContentfulAboutPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutPageGroupConnection_maxArgs = {
  field: ContentfulAboutPageFieldSelector;
};


type ContentfulAboutPageGroupConnection_minArgs = {
  field: ContentfulAboutPageFieldSelector;
};


type ContentfulAboutPageGroupConnection_sumArgs = {
  field: ContentfulAboutPageFieldSelector;
};

type ContentfulAboutPageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageBlockSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type ContentfulAboutProfile = AboutProfile & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly jobTitle: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type ContentfulAboutProfileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutProfileEdge>;
  readonly group: ReadonlyArray<ContentfulAboutProfileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutProfile>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutProfileConnection_distinctArgs = {
  field: ContentfulAboutProfileFieldSelector;
};


type ContentfulAboutProfileConnection_groupArgs = {
  field: ContentfulAboutProfileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutProfileConnection_maxArgs = {
  field: ContentfulAboutProfileFieldSelector;
};


type ContentfulAboutProfileConnection_minArgs = {
  field: ContentfulAboutProfileFieldSelector;
};


type ContentfulAboutProfileConnection_sumArgs = {
  field: ContentfulAboutProfileFieldSelector;
};

type ContentfulAboutProfileEdge = {
  readonly next: Maybe<ContentfulAboutProfile>;
  readonly node: ContentfulAboutProfile;
  readonly previous: Maybe<ContentfulAboutProfile>;
};

type ContentfulAboutProfileFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jobTitle: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulAboutProfileFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jobTitle: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulAboutProfileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutProfileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAboutProfileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutProfile>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutProfileGroupConnection_distinctArgs = {
  field: ContentfulAboutProfileFieldSelector;
};


type ContentfulAboutProfileGroupConnection_groupArgs = {
  field: ContentfulAboutProfileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutProfileGroupConnection_maxArgs = {
  field: ContentfulAboutProfileFieldSelector;
};


type ContentfulAboutProfileGroupConnection_minArgs = {
  field: ContentfulAboutProfileFieldSelector;
};


type ContentfulAboutProfileGroupConnection_sumArgs = {
  field: ContentfulAboutProfileFieldSelector;
};

type ContentfulAboutProfileSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jobTitle: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulAboutStat = AboutStat & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly label: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly value: Maybe<Scalars['String']>;
};

type ContentfulAboutStatConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutStatEdge>;
  readonly group: ReadonlyArray<ContentfulAboutStatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutStat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutStatConnection_distinctArgs = {
  field: ContentfulAboutStatFieldSelector;
};


type ContentfulAboutStatConnection_groupArgs = {
  field: ContentfulAboutStatFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutStatConnection_maxArgs = {
  field: ContentfulAboutStatFieldSelector;
};


type ContentfulAboutStatConnection_minArgs = {
  field: ContentfulAboutStatFieldSelector;
};


type ContentfulAboutStatConnection_sumArgs = {
  field: ContentfulAboutStatFieldSelector;
};

type ContentfulAboutStatEdge = {
  readonly next: Maybe<ContentfulAboutStat>;
  readonly node: ContentfulAboutStat;
  readonly previous: Maybe<ContentfulAboutStat>;
};

type ContentfulAboutStatFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAboutStatFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAboutStatGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutStatEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAboutStatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutStat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutStatGroupConnection_distinctArgs = {
  field: ContentfulAboutStatFieldSelector;
};


type ContentfulAboutStatGroupConnection_groupArgs = {
  field: ContentfulAboutStatFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutStatGroupConnection_maxArgs = {
  field: ContentfulAboutStatFieldSelector;
};


type ContentfulAboutStatGroupConnection_minArgs = {
  field: ContentfulAboutStatFieldSelector;
};


type ContentfulAboutStatGroupConnection_sumArgs = {
  field: ContentfulAboutStatFieldSelector;
};

type ContentfulAboutStatList = AboutStatList & HomepageBlock & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<AboutStat>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type ContentfulAboutStatListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutStatListEdge>;
  readonly group: ReadonlyArray<ContentfulAboutStatListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutStatList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutStatListConnection_distinctArgs = {
  field: ContentfulAboutStatListFieldSelector;
};


type ContentfulAboutStatListConnection_groupArgs = {
  field: ContentfulAboutStatListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutStatListConnection_maxArgs = {
  field: ContentfulAboutStatListFieldSelector;
};


type ContentfulAboutStatListConnection_minArgs = {
  field: ContentfulAboutStatListFieldSelector;
};


type ContentfulAboutStatListConnection_sumArgs = {
  field: ContentfulAboutStatListFieldSelector;
};

type ContentfulAboutStatListEdge = {
  readonly next: Maybe<ContentfulAboutStatList>;
  readonly node: ContentfulAboutStatList;
  readonly previous: Maybe<ContentfulAboutStatList>;
};

type ContentfulAboutStatListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<AboutStatFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulAboutStatListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<AboutStatFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulAboutStatListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAboutStatListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAboutStatListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAboutStatList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAboutStatListGroupConnection_distinctArgs = {
  field: ContentfulAboutStatListFieldSelector;
};


type ContentfulAboutStatListGroupConnection_groupArgs = {
  field: ContentfulAboutStatListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAboutStatListGroupConnection_maxArgs = {
  field: ContentfulAboutStatListFieldSelector;
};


type ContentfulAboutStatListGroupConnection_minArgs = {
  field: ContentfulAboutStatListFieldSelector;
};


type ContentfulAboutStatListGroupConnection_sumArgs = {
  field: ContentfulAboutStatListFieldSelector;
};

type ContentfulAboutStatListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<AboutStatSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulAboutStatSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type ContentfulAsset = ContentfulReference & HomepageImage & Node & RemoteFile & {
  readonly alt: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fields: Maybe<ContentfulAssetFields>;
  readonly file: Maybe<Scalars['JSON']>;
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly gatsbyImageData: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFile: Maybe<File>;
  readonly mimeType: Scalars['String'];
  readonly node_locale: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly placeholderUrl: Maybe<Scalars['String']>;
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly size: Maybe<Scalars['Int']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulAssetSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type ContentfulAsset_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulAsset_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cornerRadius?: InputMaybe<Scalars['Int']>;
  cropFocus: InputMaybe<ContentfulImageCropFocus>;
  formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  layout: InputMaybe<GatsbyImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<GatsbyImagePlaceholder>;
  quality: InputMaybe<Scalars['Int']>;
  resizingBehavior: InputMaybe<ImageResizingBehavior>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulAssetConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAssetEdge>;
  readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAssetConnection_distinctArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetConnection_groupArgs = {
  field: ContentfulAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAssetConnection_maxArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetConnection_minArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetConnection_sumArgs = {
  field: ContentfulAssetFieldSelector;
};

type ContentfulAssetEdge = {
  readonly next: Maybe<ContentfulAsset>;
  readonly node: ContentfulAsset;
  readonly previous: Maybe<ContentfulAsset>;
};

type ContentfulAssetFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fields: InputMaybe<ContentfulAssetFieldsFieldSelector>;
  readonly file: InputMaybe<FieldSelectorEnum>;
  readonly filename: InputMaybe<FieldSelectorEnum>;
  readonly filesize: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyImage: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localFile: InputMaybe<FileFieldSelector>;
  readonly mimeType: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly placeholderUrl: InputMaybe<FieldSelectorEnum>;
  readonly publicUrl: InputMaybe<FieldSelectorEnum>;
  readonly resize: InputMaybe<RemoteFileResizeFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulAssetSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFields = {
  readonly localFile: Maybe<Scalars['String']>;
};

type ContentfulAssetFieldsFieldSelector = {
  readonly localFile: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFieldsFilterInput = {
  readonly localFile: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAssetFieldsSortInput = {
  readonly localFile: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fields: InputMaybe<ContentfulAssetFieldsFilterInput>;
  readonly file: InputMaybe<JSONQueryOperatorInput>;
  readonly filename: InputMaybe<StringQueryOperatorInput>;
  readonly filesize: InputMaybe<IntQueryOperatorInput>;
  readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly placeholderUrl: InputMaybe<StringQueryOperatorInput>;
  readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
  readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulAssetSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAssetEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAssetGroupConnection_distinctArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetGroupConnection_groupArgs = {
  field: ContentfulAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAssetGroupConnection_maxArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetGroupConnection_minArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetGroupConnection_sumArgs = {
  field: ContentfulAssetFieldSelector;
};

type ContentfulAssetSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fields: InputMaybe<ContentfulAssetFieldsSortInput>;
  readonly file: InputMaybe<SortOrderEnum>;
  readonly filename: InputMaybe<SortOrderEnum>;
  readonly filesize: InputMaybe<SortOrderEnum>;
  readonly gatsbyImage: InputMaybe<SortOrderEnum>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localFile: InputMaybe<FileSortInput>;
  readonly mimeType: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly placeholderUrl: InputMaybe<SortOrderEnum>;
  readonly publicUrl: InputMaybe<SortOrderEnum>;
  readonly resize: InputMaybe<RemoteFileResizeSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulAssetSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetSys = {
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAssetSysFieldSelector = {
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetSysFilterInput = {
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAssetSysSortInput = {
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulContentType = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly displayField: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<ContentfulContentTypeSys>;
};

type ContentfulContentTypeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
  readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContentTypeConnection_distinctArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeConnection_groupArgs = {
  field: ContentfulContentTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContentTypeConnection_maxArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeConnection_minArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeConnection_sumArgs = {
  field: ContentfulContentTypeFieldSelector;
};

type ContentfulContentTypeEdge = {
  readonly next: Maybe<ContentfulContentType>;
  readonly node: ContentfulContentType;
  readonly previous: Maybe<ContentfulContentType>;
};

type ContentfulContentTypeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly displayField: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<ContentfulContentTypeSysFieldSelector>;
};

type ContentfulContentTypeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly displayField: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
};

type ContentfulContentTypeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContentTypeGroupConnection_distinctArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeGroupConnection_groupArgs = {
  field: ContentfulContentTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContentTypeGroupConnection_maxArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeGroupConnection_minArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeGroupConnection_sumArgs = {
  field: ContentfulContentTypeFieldSelector;
};

type ContentfulContentTypeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly displayField: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<ContentfulContentTypeSysSortInput>;
};

type ContentfulContentTypeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulContentTypeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulContentTypeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulContentTypeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulEntry = {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulEntryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEntryEdge>;
  readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEntryConnection_distinctArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryConnection_groupArgs = {
  field: ContentfulEntryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEntryConnection_maxArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryConnection_minArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryConnection_sumArgs = {
  field: ContentfulEntryFieldSelector;
};

type ContentfulEntryEdge = {
  readonly next: Maybe<ContentfulEntry>;
  readonly node: ContentfulEntry;
  readonly previous: Maybe<ContentfulEntry>;
};

type ContentfulEntryFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulEntryFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulEntryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEntryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEntryGroupConnection_distinctArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryGroupConnection_groupArgs = {
  field: ContentfulEntryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEntryGroupConnection_maxArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryGroupConnection_minArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryGroupConnection_sumArgs = {
  field: ContentfulEntryFieldSelector;
};

type ContentfulEntrySortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulHomepage = ContentfulEntry & ContentfulReference & Homepage & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageBlock>>>;
  readonly contentful_id: Scalars['String'];
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type ContentfulHomepageBenefit = ContentfulEntry & ContentfulReference & HomepageBenefit & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageBenefitConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageBenefitEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageBenefitGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageBenefit>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageBenefitConnection_distinctArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
};


type ContentfulHomepageBenefitConnection_groupArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageBenefitConnection_maxArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
};


type ContentfulHomepageBenefitConnection_minArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
};


type ContentfulHomepageBenefitConnection_sumArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
};

type ContentfulHomepageBenefitEdge = {
  readonly next: Maybe<ContentfulHomepageBenefit>;
  readonly node: ContentfulHomepageBenefit;
  readonly previous: Maybe<ContentfulHomepageBenefit>;
};

type ContentfulHomepageBenefitFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageBenefitFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageBenefitGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageBenefitEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageBenefitGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageBenefit>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageBenefitGroupConnection_distinctArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
};


type ContentfulHomepageBenefitGroupConnection_groupArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageBenefitGroupConnection_maxArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
};


type ContentfulHomepageBenefitGroupConnection_minArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
};


type ContentfulHomepageBenefitGroupConnection_sumArgs = {
  field: ContentfulHomepageBenefitFieldSelector;
};

type ContentfulHomepageBenefitList = ContentfulEntry & ContentfulReference & HomepageBenefitList & HomepageBlock & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageBenefit>>>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageBenefitListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageBenefitListEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageBenefitListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageBenefitList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageBenefitListConnection_distinctArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
};


type ContentfulHomepageBenefitListConnection_groupArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageBenefitListConnection_maxArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
};


type ContentfulHomepageBenefitListConnection_minArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
};


type ContentfulHomepageBenefitListConnection_sumArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
};

type ContentfulHomepageBenefitListEdge = {
  readonly next: Maybe<ContentfulHomepageBenefitList>;
  readonly node: ContentfulHomepageBenefitList;
  readonly previous: Maybe<ContentfulHomepageBenefitList>;
};

type ContentfulHomepageBenefitListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageBenefitFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageBenefitListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageBenefitFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageBenefitListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageBenefitListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageBenefitListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageBenefitList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageBenefitListGroupConnection_distinctArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
};


type ContentfulHomepageBenefitListGroupConnection_groupArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageBenefitListGroupConnection_maxArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
};


type ContentfulHomepageBenefitListGroupConnection_minArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
};


type ContentfulHomepageBenefitListGroupConnection_sumArgs = {
  field: ContentfulHomepageBenefitListFieldSelector;
};

type ContentfulHomepageBenefitListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageBenefitSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageBenefitSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageConnection_distinctArgs = {
  field: ContentfulHomepageFieldSelector;
};


type ContentfulHomepageConnection_groupArgs = {
  field: ContentfulHomepageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageConnection_maxArgs = {
  field: ContentfulHomepageFieldSelector;
};


type ContentfulHomepageConnection_minArgs = {
  field: ContentfulHomepageFieldSelector;
};


type ContentfulHomepageConnection_sumArgs = {
  field: ContentfulHomepageFieldSelector;
};

type ContentfulHomepageCta = ContentfulEntry & ContentfulReference & HomepageBlock & HomepageCta & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageCtaConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageCtaEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageCtaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageCta>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageCtaConnection_distinctArgs = {
  field: ContentfulHomepageCtaFieldSelector;
};


type ContentfulHomepageCtaConnection_groupArgs = {
  field: ContentfulHomepageCtaFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageCtaConnection_maxArgs = {
  field: ContentfulHomepageCtaFieldSelector;
};


type ContentfulHomepageCtaConnection_minArgs = {
  field: ContentfulHomepageCtaFieldSelector;
};


type ContentfulHomepageCtaConnection_sumArgs = {
  field: ContentfulHomepageCtaFieldSelector;
};

type ContentfulHomepageCtaEdge = {
  readonly next: Maybe<ContentfulHomepageCta>;
  readonly node: ContentfulHomepageCta;
  readonly previous: Maybe<ContentfulHomepageCta>;
};

type ContentfulHomepageCtaFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageCtaFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageCtaGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageCtaEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageCtaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageCta>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageCtaGroupConnection_distinctArgs = {
  field: ContentfulHomepageCtaFieldSelector;
};


type ContentfulHomepageCtaGroupConnection_groupArgs = {
  field: ContentfulHomepageCtaFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageCtaGroupConnection_maxArgs = {
  field: ContentfulHomepageCtaFieldSelector;
};


type ContentfulHomepageCtaGroupConnection_minArgs = {
  field: ContentfulHomepageCtaFieldSelector;
};


type ContentfulHomepageCtaGroupConnection_sumArgs = {
  field: ContentfulHomepageCtaFieldSelector;
};

type ContentfulHomepageCtaSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageEdge = {
  readonly next: Maybe<ContentfulHomepage>;
  readonly node: ContentfulHomepage;
  readonly previous: Maybe<ContentfulHomepage>;
};

type ContentfulHomepageFeature = ContentfulEntry & ContentfulReference & HomepageBlock & HomepageFeature & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageFeatureConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageFeatureEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageFeatureGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageFeature>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageFeatureConnection_distinctArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
};


type ContentfulHomepageFeatureConnection_groupArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageFeatureConnection_maxArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
};


type ContentfulHomepageFeatureConnection_minArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
};


type ContentfulHomepageFeatureConnection_sumArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
};

type ContentfulHomepageFeatureEdge = {
  readonly next: Maybe<ContentfulHomepageFeature>;
  readonly node: ContentfulHomepageFeature;
  readonly previous: Maybe<ContentfulHomepageFeature>;
};

type ContentfulHomepageFeatureFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageFeatureFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageFeatureGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageFeatureEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageFeatureGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageFeature>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageFeatureGroupConnection_distinctArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
};


type ContentfulHomepageFeatureGroupConnection_groupArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageFeatureGroupConnection_maxArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
};


type ContentfulHomepageFeatureGroupConnection_minArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
};


type ContentfulHomepageFeatureGroupConnection_sumArgs = {
  field: ContentfulHomepageFeatureFieldSelector;
};

type ContentfulHomepageFeatureList = ContentfulEntry & ContentfulReference & HomepageBlock & HomepageFeatureList & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageFeature>>>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageFeatureListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageFeatureListEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageFeatureListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageFeatureList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageFeatureListConnection_distinctArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
};


type ContentfulHomepageFeatureListConnection_groupArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageFeatureListConnection_maxArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
};


type ContentfulHomepageFeatureListConnection_minArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
};


type ContentfulHomepageFeatureListConnection_sumArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
};

type ContentfulHomepageFeatureListEdge = {
  readonly next: Maybe<ContentfulHomepageFeatureList>;
  readonly node: ContentfulHomepageFeatureList;
  readonly previous: Maybe<ContentfulHomepageFeatureList>;
};

type ContentfulHomepageFeatureListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageFeatureFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageFeatureListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageFeatureFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageFeatureListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageFeatureListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageFeatureListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageFeatureList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageFeatureListGroupConnection_distinctArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
};


type ContentfulHomepageFeatureListGroupConnection_groupArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageFeatureListGroupConnection_maxArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
};


type ContentfulHomepageFeatureListGroupConnection_minArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
};


type ContentfulHomepageFeatureListGroupConnection_sumArgs = {
  field: ContentfulHomepageFeatureListFieldSelector;
};

type ContentfulHomepageFeatureListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageFeatureSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageFeatureSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageBlockFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageBlockFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageGroupConnection_distinctArgs = {
  field: ContentfulHomepageFieldSelector;
};


type ContentfulHomepageGroupConnection_groupArgs = {
  field: ContentfulHomepageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageGroupConnection_maxArgs = {
  field: ContentfulHomepageFieldSelector;
};


type ContentfulHomepageGroupConnection_minArgs = {
  field: ContentfulHomepageFieldSelector;
};


type ContentfulHomepageGroupConnection_sumArgs = {
  field: ContentfulHomepageFieldSelector;
};

type ContentfulHomepageHero = ContentfulEntry & ContentfulReference & HomepageBlock & HomepageHero & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly subhead: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageHeroConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageHeroEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageHeroConnection_distinctArgs = {
  field: ContentfulHomepageHeroFieldSelector;
};


type ContentfulHomepageHeroConnection_groupArgs = {
  field: ContentfulHomepageHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageHeroConnection_maxArgs = {
  field: ContentfulHomepageHeroFieldSelector;
};


type ContentfulHomepageHeroConnection_minArgs = {
  field: ContentfulHomepageHeroFieldSelector;
};


type ContentfulHomepageHeroConnection_sumArgs = {
  field: ContentfulHomepageHeroFieldSelector;
};

type ContentfulHomepageHeroEdge = {
  readonly next: Maybe<ContentfulHomepageHero>;
  readonly node: ContentfulHomepageHero;
  readonly previous: Maybe<ContentfulHomepageHero>;
};

type ContentfulHomepageHeroFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly subhead: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageHeroFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly subhead: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageHeroGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageHeroEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageHeroGroupConnection_distinctArgs = {
  field: ContentfulHomepageHeroFieldSelector;
};


type ContentfulHomepageHeroGroupConnection_groupArgs = {
  field: ContentfulHomepageHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageHeroGroupConnection_maxArgs = {
  field: ContentfulHomepageHeroFieldSelector;
};


type ContentfulHomepageHeroGroupConnection_minArgs = {
  field: ContentfulHomepageHeroFieldSelector;
};


type ContentfulHomepageHeroGroupConnection_sumArgs = {
  field: ContentfulHomepageHeroFieldSelector;
};

type ContentfulHomepageHeroSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly subhead: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageLink = ContentfulEntry & ContentfulReference & HomepageLink & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly href: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageLinkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageLinkEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageLinkConnection_distinctArgs = {
  field: ContentfulHomepageLinkFieldSelector;
};


type ContentfulHomepageLinkConnection_groupArgs = {
  field: ContentfulHomepageLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageLinkConnection_maxArgs = {
  field: ContentfulHomepageLinkFieldSelector;
};


type ContentfulHomepageLinkConnection_minArgs = {
  field: ContentfulHomepageLinkFieldSelector;
};


type ContentfulHomepageLinkConnection_sumArgs = {
  field: ContentfulHomepageLinkFieldSelector;
};

type ContentfulHomepageLinkEdge = {
  readonly next: Maybe<ContentfulHomepageLink>;
  readonly node: ContentfulHomepageLink;
  readonly previous: Maybe<ContentfulHomepageLink>;
};

type ContentfulHomepageLinkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageLinkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageLinkGroup = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<ContentfulNavItem>>>;
  readonly name: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulHomepageLinkGroupSys>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulHomepageLinkGroup_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulHomepageLinkGroup_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulHomepageLinkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageLinkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageLinkGroupConnection_distinctArgs = {
  field: ContentfulHomepageLinkFieldSelector;
};


type ContentfulHomepageLinkGroupConnection_groupArgs = {
  field: ContentfulHomepageLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageLinkGroupConnection_maxArgs = {
  field: ContentfulHomepageLinkFieldSelector;
};


type ContentfulHomepageLinkGroupConnection_minArgs = {
  field: ContentfulHomepageLinkFieldSelector;
};


type ContentfulHomepageLinkGroupConnection_sumArgs = {
  field: ContentfulHomepageLinkFieldSelector;
};

type ContentfulHomepageLinkGroupFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<ContentfulNavItemFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulHomepageLinkGroupSysFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulHomepageLinkGroupSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<ContentfulNavItemSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulHomepageLinkGroupSysSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageLinkGroupSys = {
  readonly contentType: Maybe<ContentfulHomepageLinkGroupSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulHomepageLinkGroupSysContentType = {
  readonly sys: Maybe<ContentfulHomepageLinkGroupSysContentTypeSys>;
};

type ContentfulHomepageLinkGroupSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulHomepageLinkGroupSysContentTypeSysFilterInput>;
};

type ContentfulHomepageLinkGroupSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulHomepageLinkGroupSysContentTypeSysSortInput>;
};

type ContentfulHomepageLinkGroupSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulHomepageLinkGroupSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageLinkGroupSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageLinkGroupSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulHomepageLinkGroupSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageLinkGroupSysSortInput = {
  readonly contentType: InputMaybe<ContentfulHomepageLinkGroupSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageLinkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageLogo = ContentfulEntry & ContentfulReference & HomepageLogo & Node & {
  readonly alt: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulHomepageLogoConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageLogoEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageLogoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageLogo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageLogoConnection_distinctArgs = {
  field: ContentfulHomepageLogoFieldSelector;
};


type ContentfulHomepageLogoConnection_groupArgs = {
  field: ContentfulHomepageLogoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageLogoConnection_maxArgs = {
  field: ContentfulHomepageLogoFieldSelector;
};


type ContentfulHomepageLogoConnection_minArgs = {
  field: ContentfulHomepageLogoFieldSelector;
};


type ContentfulHomepageLogoConnection_sumArgs = {
  field: ContentfulHomepageLogoFieldSelector;
};

type ContentfulHomepageLogoEdge = {
  readonly next: Maybe<ContentfulHomepageLogo>;
  readonly node: ContentfulHomepageLogo;
  readonly previous: Maybe<ContentfulHomepageLogo>;
};

type ContentfulHomepageLogoFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulHomepageLogoFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulHomepageLogoGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageLogoEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageLogoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageLogo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageLogoGroupConnection_distinctArgs = {
  field: ContentfulHomepageLogoFieldSelector;
};


type ContentfulHomepageLogoGroupConnection_groupArgs = {
  field: ContentfulHomepageLogoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageLogoGroupConnection_maxArgs = {
  field: ContentfulHomepageLogoFieldSelector;
};


type ContentfulHomepageLogoGroupConnection_minArgs = {
  field: ContentfulHomepageLogoFieldSelector;
};


type ContentfulHomepageLogoGroupConnection_sumArgs = {
  field: ContentfulHomepageLogoFieldSelector;
};

type ContentfulHomepageLogoList = ContentfulEntry & ContentfulReference & HomepageBlock & HomepageLogoList & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly logos: Maybe<ReadonlyArray<Maybe<HomepageLogo>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageLogoListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageLogoListEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageLogoListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageLogoList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageLogoListConnection_distinctArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
};


type ContentfulHomepageLogoListConnection_groupArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageLogoListConnection_maxArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
};


type ContentfulHomepageLogoListConnection_minArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
};


type ContentfulHomepageLogoListConnection_sumArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
};

type ContentfulHomepageLogoListEdge = {
  readonly next: Maybe<ContentfulHomepageLogoList>;
  readonly node: ContentfulHomepageLogoList;
  readonly previous: Maybe<ContentfulHomepageLogoList>;
};

type ContentfulHomepageLogoListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly logos: InputMaybe<HomepageLogoFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageLogoListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly logos: InputMaybe<HomepageLogoFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageLogoListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageLogoListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageLogoListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageLogoList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageLogoListGroupConnection_distinctArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
};


type ContentfulHomepageLogoListGroupConnection_groupArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageLogoListGroupConnection_maxArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
};


type ContentfulHomepageLogoListGroupConnection_minArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
};


type ContentfulHomepageLogoListGroupConnection_sumArgs = {
  field: ContentfulHomepageLogoListFieldSelector;
};

type ContentfulHomepageLogoListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly logos: InputMaybe<HomepageLogoSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageLogoSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulHomepageProduct = ContentfulEntry & ContentfulReference & HomepageProduct & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageProductConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageProductEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageProductGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageProduct>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageProductConnection_distinctArgs = {
  field: ContentfulHomepageProductFieldSelector;
};


type ContentfulHomepageProductConnection_groupArgs = {
  field: ContentfulHomepageProductFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageProductConnection_maxArgs = {
  field: ContentfulHomepageProductFieldSelector;
};


type ContentfulHomepageProductConnection_minArgs = {
  field: ContentfulHomepageProductFieldSelector;
};


type ContentfulHomepageProductConnection_sumArgs = {
  field: ContentfulHomepageProductFieldSelector;
};

type ContentfulHomepageProductEdge = {
  readonly next: Maybe<ContentfulHomepageProduct>;
  readonly node: ContentfulHomepageProduct;
  readonly previous: Maybe<ContentfulHomepageProduct>;
};

type ContentfulHomepageProductFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageProductFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageProductGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageProductEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageProductGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageProduct>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageProductGroupConnection_distinctArgs = {
  field: ContentfulHomepageProductFieldSelector;
};


type ContentfulHomepageProductGroupConnection_groupArgs = {
  field: ContentfulHomepageProductFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageProductGroupConnection_maxArgs = {
  field: ContentfulHomepageProductFieldSelector;
};


type ContentfulHomepageProductGroupConnection_minArgs = {
  field: ContentfulHomepageProductFieldSelector;
};


type ContentfulHomepageProductGroupConnection_sumArgs = {
  field: ContentfulHomepageProductFieldSelector;
};

type ContentfulHomepageProductList = ContentfulEntry & ContentfulReference & HomepageBlock & HomepageProductList & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageProduct>>>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageProductListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageProductListEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageProductListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageProductList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageProductListConnection_distinctArgs = {
  field: ContentfulHomepageProductListFieldSelector;
};


type ContentfulHomepageProductListConnection_groupArgs = {
  field: ContentfulHomepageProductListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageProductListConnection_maxArgs = {
  field: ContentfulHomepageProductListFieldSelector;
};


type ContentfulHomepageProductListConnection_minArgs = {
  field: ContentfulHomepageProductListFieldSelector;
};


type ContentfulHomepageProductListConnection_sumArgs = {
  field: ContentfulHomepageProductListFieldSelector;
};

type ContentfulHomepageProductListEdge = {
  readonly next: Maybe<ContentfulHomepageProductList>;
  readonly node: ContentfulHomepageProductList;
  readonly previous: Maybe<ContentfulHomepageProductList>;
};

type ContentfulHomepageProductListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageProductFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageProductListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageProductFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageProductListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageProductListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageProductListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageProductList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageProductListGroupConnection_distinctArgs = {
  field: ContentfulHomepageProductListFieldSelector;
};


type ContentfulHomepageProductListGroupConnection_groupArgs = {
  field: ContentfulHomepageProductListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageProductListGroupConnection_maxArgs = {
  field: ContentfulHomepageProductListFieldSelector;
};


type ContentfulHomepageProductListGroupConnection_minArgs = {
  field: ContentfulHomepageProductListFieldSelector;
};


type ContentfulHomepageProductListGroupConnection_sumArgs = {
  field: ContentfulHomepageProductListFieldSelector;
};

type ContentfulHomepageProductListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageProductSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageProductSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageBlockSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageStat = ContentfulEntry & ContentfulReference & HomepageStat & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly label: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly value: Maybe<Scalars['String']>;
};

type ContentfulHomepageStatConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageStatEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageStatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageStat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageStatConnection_distinctArgs = {
  field: ContentfulHomepageStatFieldSelector;
};


type ContentfulHomepageStatConnection_groupArgs = {
  field: ContentfulHomepageStatFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageStatConnection_maxArgs = {
  field: ContentfulHomepageStatFieldSelector;
};


type ContentfulHomepageStatConnection_minArgs = {
  field: ContentfulHomepageStatFieldSelector;
};


type ContentfulHomepageStatConnection_sumArgs = {
  field: ContentfulHomepageStatFieldSelector;
};

type ContentfulHomepageStatEdge = {
  readonly next: Maybe<ContentfulHomepageStat>;
  readonly node: ContentfulHomepageStat;
  readonly previous: Maybe<ContentfulHomepageStat>;
};

type ContentfulHomepageStatFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageStatFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageStatGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageStatEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageStatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageStat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageStatGroupConnection_distinctArgs = {
  field: ContentfulHomepageStatFieldSelector;
};


type ContentfulHomepageStatGroupConnection_groupArgs = {
  field: ContentfulHomepageStatFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageStatGroupConnection_maxArgs = {
  field: ContentfulHomepageStatFieldSelector;
};


type ContentfulHomepageStatGroupConnection_minArgs = {
  field: ContentfulHomepageStatFieldSelector;
};


type ContentfulHomepageStatGroupConnection_sumArgs = {
  field: ContentfulHomepageStatFieldSelector;
};

type ContentfulHomepageStatList = ContentfulEntry & ContentfulReference & HomepageBlock & HomepageStatList & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageStat>>>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly icon: Maybe<HomepageImage>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulHomepageStatListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageStatListEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageStatListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageStatList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageStatListConnection_distinctArgs = {
  field: ContentfulHomepageStatListFieldSelector;
};


type ContentfulHomepageStatListConnection_groupArgs = {
  field: ContentfulHomepageStatListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageStatListConnection_maxArgs = {
  field: ContentfulHomepageStatListFieldSelector;
};


type ContentfulHomepageStatListConnection_minArgs = {
  field: ContentfulHomepageStatListFieldSelector;
};


type ContentfulHomepageStatListConnection_sumArgs = {
  field: ContentfulHomepageStatListFieldSelector;
};

type ContentfulHomepageStatListEdge = {
  readonly next: Maybe<ContentfulHomepageStatList>;
  readonly node: ContentfulHomepageStatList;
  readonly previous: Maybe<ContentfulHomepageStatList>;
};

type ContentfulHomepageStatListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageStatFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<HomepageImageFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageStatListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageStatFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<HomepageImageFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageStatListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageStatListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageStatListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageStatList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageStatListGroupConnection_distinctArgs = {
  field: ContentfulHomepageStatListFieldSelector;
};


type ContentfulHomepageStatListGroupConnection_groupArgs = {
  field: ContentfulHomepageStatListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageStatListGroupConnection_maxArgs = {
  field: ContentfulHomepageStatListFieldSelector;
};


type ContentfulHomepageStatListGroupConnection_minArgs = {
  field: ContentfulHomepageStatListFieldSelector;
};


type ContentfulHomepageStatListGroupConnection_sumArgs = {
  field: ContentfulHomepageStatListFieldSelector;
};

type ContentfulHomepageStatListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageStatSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<HomepageImageSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageStatSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type ContentfulHomepageTestimonial = ContentfulEntry & ContentfulReference & HomepageTestimonial & Node & {
  readonly avatar: Maybe<HomepageImage>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly quote: Maybe<Scalars['String']>;
  readonly source: Maybe<Scalars['String']>;
};

type ContentfulHomepageTestimonialConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageTestimonialEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageTestimonialGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageTestimonial>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageTestimonialConnection_distinctArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
};


type ContentfulHomepageTestimonialConnection_groupArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageTestimonialConnection_maxArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
};


type ContentfulHomepageTestimonialConnection_minArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
};


type ContentfulHomepageTestimonialConnection_sumArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
};

type ContentfulHomepageTestimonialEdge = {
  readonly next: Maybe<ContentfulHomepageTestimonial>;
  readonly node: ContentfulHomepageTestimonial;
  readonly previous: Maybe<ContentfulHomepageTestimonial>;
};

type ContentfulHomepageTestimonialFieldSelector = {
  readonly avatar: InputMaybe<HomepageImageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly quote: InputMaybe<FieldSelectorEnum>;
  readonly source: InputMaybe<FieldSelectorEnum>;
};

type ContentfulHomepageTestimonialFilterInput = {
  readonly avatar: InputMaybe<HomepageImageFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly quote: InputMaybe<StringQueryOperatorInput>;
  readonly source: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulHomepageTestimonialGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageTestimonialEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageTestimonialGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageTestimonial>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageTestimonialGroupConnection_distinctArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
};


type ContentfulHomepageTestimonialGroupConnection_groupArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageTestimonialGroupConnection_maxArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
};


type ContentfulHomepageTestimonialGroupConnection_minArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
};


type ContentfulHomepageTestimonialGroupConnection_sumArgs = {
  field: ContentfulHomepageTestimonialFieldSelector;
};

type ContentfulHomepageTestimonialList = ContentfulEntry & ContentfulReference & HomepageBlock & HomepageTestimonialList & Node & {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageTestimonial>>>;
  readonly contentful_id: Scalars['String'];
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulHomepageTestimonialListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageTestimonialListEdge>;
  readonly group: ReadonlyArray<ContentfulHomepageTestimonialListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageTestimonialList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageTestimonialListConnection_distinctArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
};


type ContentfulHomepageTestimonialListConnection_groupArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageTestimonialListConnection_maxArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
};


type ContentfulHomepageTestimonialListConnection_minArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
};


type ContentfulHomepageTestimonialListConnection_sumArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
};

type ContentfulHomepageTestimonialListEdge = {
  readonly next: Maybe<ContentfulHomepageTestimonialList>;
  readonly node: ContentfulHomepageTestimonialList;
  readonly previous: Maybe<ContentfulHomepageTestimonialList>;
};

type ContentfulHomepageTestimonialListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageTestimonialFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulHomepageTestimonialListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageTestimonialFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulHomepageTestimonialListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulHomepageTestimonialListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulHomepageTestimonialListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulHomepageTestimonialList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulHomepageTestimonialListGroupConnection_distinctArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
};


type ContentfulHomepageTestimonialListGroupConnection_groupArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulHomepageTestimonialListGroupConnection_maxArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
};


type ContentfulHomepageTestimonialListGroupConnection_minArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
};


type ContentfulHomepageTestimonialListGroupConnection_sumArgs = {
  field: ContentfulHomepageTestimonialListFieldSelector;
};

type ContentfulHomepageTestimonialListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageTestimonialSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulHomepageTestimonialSortInput = {
  readonly avatar: InputMaybe<HomepageImageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly quote: InputMaybe<SortOrderEnum>;
  readonly source: InputMaybe<SortOrderEnum>;
};

type ContentfulImageCropFocus =
  | 'bottom'
  | 'bottom_right'
  | 'bottom_left'
  | 'center'
  | 'face'
  | 'faces'
  | 'left'
  | 'right'
  | 'top'
  | 'top_left'
  | 'top_right';

type ContentfulLayout = ContentfulEntry & ContentfulReference & Layout & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly footer: Maybe<LayoutFooter>;
  readonly header: Maybe<LayoutHeader>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLayoutConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutEdge>;
  readonly group: ReadonlyArray<ContentfulLayoutGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayout>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutConnection_distinctArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutConnection_groupArgs = {
  field: ContentfulLayoutFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutConnection_maxArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutConnection_minArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutConnection_sumArgs = {
  field: ContentfulLayoutFieldSelector;
};

type ContentfulLayoutEdge = {
  readonly next: Maybe<ContentfulLayout>;
  readonly node: ContentfulLayout;
  readonly previous: Maybe<ContentfulLayout>;
};

type ContentfulLayoutFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly footer: InputMaybe<LayoutFooterFieldSelector>;
  readonly header: InputMaybe<LayoutHeaderFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulLayoutFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly footer: InputMaybe<LayoutFooterFilterInput>;
  readonly header: InputMaybe<LayoutHeaderFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLayoutFooter = ContentfulEntry & ContentfulReference & LayoutFooter & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly copyright: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly meta: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly socialLinks: Maybe<ReadonlyArray<Maybe<SocialLink>>>;
};

type ContentfulLayoutFooterConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutFooterEdge>;
  readonly group: ReadonlyArray<ContentfulLayoutFooterGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutFooter>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutFooterConnection_distinctArgs = {
  field: ContentfulLayoutFooterFieldSelector;
};


type ContentfulLayoutFooterConnection_groupArgs = {
  field: ContentfulLayoutFooterFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutFooterConnection_maxArgs = {
  field: ContentfulLayoutFooterFieldSelector;
};


type ContentfulLayoutFooterConnection_minArgs = {
  field: ContentfulLayoutFooterFieldSelector;
};


type ContentfulLayoutFooterConnection_sumArgs = {
  field: ContentfulLayoutFooterFieldSelector;
};

type ContentfulLayoutFooterEdge = {
  readonly next: Maybe<ContentfulLayoutFooter>;
  readonly node: ContentfulLayoutFooter;
  readonly previous: Maybe<ContentfulLayoutFooter>;
};

type ContentfulLayoutFooterFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly copyright: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly meta: InputMaybe<HomepageLinkFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly socialLinks: InputMaybe<SocialLinkFieldSelector>;
};

type ContentfulLayoutFooterFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly copyright: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly meta: InputMaybe<HomepageLinkFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly socialLinks: InputMaybe<SocialLinkFilterListInput>;
};

type ContentfulLayoutFooterGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutFooterEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLayoutFooterGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutFooter>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutFooterGroupConnection_distinctArgs = {
  field: ContentfulLayoutFooterFieldSelector;
};


type ContentfulLayoutFooterGroupConnection_groupArgs = {
  field: ContentfulLayoutFooterFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutFooterGroupConnection_maxArgs = {
  field: ContentfulLayoutFooterFieldSelector;
};


type ContentfulLayoutFooterGroupConnection_minArgs = {
  field: ContentfulLayoutFooterFieldSelector;
};


type ContentfulLayoutFooterGroupConnection_sumArgs = {
  field: ContentfulLayoutFooterFieldSelector;
};

type ContentfulLayoutFooterSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly copyright: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly meta: InputMaybe<HomepageLinkSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly socialLinks: InputMaybe<SocialLinkSortInput>;
};

type ContentfulLayoutGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLayoutGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayout>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutGroupConnection_distinctArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutGroupConnection_groupArgs = {
  field: ContentfulLayoutFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutGroupConnection_maxArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutGroupConnection_minArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutGroupConnection_sumArgs = {
  field: ContentfulLayoutFieldSelector;
};

type ContentfulLayoutHeader = ContentfulEntry & ContentfulReference & LayoutHeader & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly cta: Maybe<HomepageLink>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly navItems: Maybe<ReadonlyArray<Maybe<HeaderNavItem>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLayoutHeaderConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutHeaderEdge>;
  readonly group: ReadonlyArray<ContentfulLayoutHeaderGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutHeader>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutHeaderConnection_distinctArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
};


type ContentfulLayoutHeaderConnection_groupArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutHeaderConnection_maxArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
};


type ContentfulLayoutHeaderConnection_minArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
};


type ContentfulLayoutHeaderConnection_sumArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
};

type ContentfulLayoutHeaderEdge = {
  readonly next: Maybe<ContentfulLayoutHeader>;
  readonly node: ContentfulLayoutHeader;
  readonly previous: Maybe<ContentfulLayoutHeader>;
};

type ContentfulLayoutHeaderFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly cta: InputMaybe<HomepageLinkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly navItems: InputMaybe<HeaderNavItemFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulLayoutHeaderFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly cta: InputMaybe<HomepageLinkFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly navItems: InputMaybe<HeaderNavItemFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLayoutHeaderGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutHeaderEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLayoutHeaderGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayoutHeader>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutHeaderGroupConnection_distinctArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
};


type ContentfulLayoutHeaderGroupConnection_groupArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutHeaderGroupConnection_maxArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
};


type ContentfulLayoutHeaderGroupConnection_minArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
};


type ContentfulLayoutHeaderGroupConnection_sumArgs = {
  field: ContentfulLayoutHeaderFieldSelector;
};

type ContentfulLayoutHeaderSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly cta: InputMaybe<HomepageLinkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly navItems: InputMaybe<HeaderNavItemSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulLayoutSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly footer: InputMaybe<LayoutFooterSortInput>;
  readonly header: InputMaybe<LayoutHeaderSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulLink = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulLinkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLinkEdge>;
  readonly group: ReadonlyArray<ContentfulLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLinkConnection_distinctArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkConnection_groupArgs = {
  field: ContentfulLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLinkConnection_maxArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkConnection_minArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkConnection_sumArgs = {
  field: ContentfulLinkFieldSelector;
};

type ContentfulLinkEdge = {
  readonly next: Maybe<ContentfulLink>;
  readonly node: ContentfulLink;
  readonly previous: Maybe<ContentfulLink>;
};

type ContentfulLinkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulLinkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulLinkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLinkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLinkGroupConnection_distinctArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkGroupConnection_groupArgs = {
  field: ContentfulLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLinkGroupConnection_maxArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkGroupConnection_minArgs = {
  field: ContentfulLinkFieldSelector;
};


type ContentfulLinkGroupConnection_sumArgs = {
  field: ContentfulLinkFieldSelector;
};

type ContentfulLinkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulNavItem = ContentfulEntry & ContentfulReference & HeaderNavItem & NavItem & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly description: Maybe<Scalars['String']>;
  readonly href: Maybe<Scalars['String']>;
  readonly icon: Maybe<HomepageImage>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly navItemType: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type ContentfulNavItemConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulNavItemEdge>;
  readonly group: ReadonlyArray<ContentfulNavItemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulNavItem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulNavItemConnection_distinctArgs = {
  field: ContentfulNavItemFieldSelector;
};


type ContentfulNavItemConnection_groupArgs = {
  field: ContentfulNavItemFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulNavItemConnection_maxArgs = {
  field: ContentfulNavItemFieldSelector;
};


type ContentfulNavItemConnection_minArgs = {
  field: ContentfulNavItemFieldSelector;
};


type ContentfulNavItemConnection_sumArgs = {
  field: ContentfulNavItemFieldSelector;
};

type ContentfulNavItemEdge = {
  readonly next: Maybe<ContentfulNavItem>;
  readonly node: ContentfulNavItem;
  readonly previous: Maybe<ContentfulNavItem>;
};

type ContentfulNavItemFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<HomepageImageFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly navItemType: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ContentfulNavItemFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<HomepageImageFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly navItemType: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulNavItemFilterListInput = {
  readonly elemMatch: InputMaybe<ContentfulNavItemFilterInput>;
};

type ContentfulNavItemGroup = ContentfulEntry & ContentfulReference & HeaderNavItem & NavItemGroup & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly navItemType: Maybe<Scalars['String']>;
  readonly navItems: Maybe<ReadonlyArray<Maybe<NavItem>>>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulNavItemGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulNavItemGroupEdge>;
  readonly group: ReadonlyArray<ContentfulNavItemGroupGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulNavItemGroup>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulNavItemGroupConnection_distinctArgs = {
  field: ContentfulNavItemGroupFieldSelector;
};


type ContentfulNavItemGroupConnection_groupArgs = {
  field: ContentfulNavItemGroupFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulNavItemGroupConnection_maxArgs = {
  field: ContentfulNavItemGroupFieldSelector;
};


type ContentfulNavItemGroupConnection_minArgs = {
  field: ContentfulNavItemGroupFieldSelector;
};


type ContentfulNavItemGroupConnection_sumArgs = {
  field: ContentfulNavItemGroupFieldSelector;
};

type ContentfulNavItemGroupEdge = {
  readonly next: Maybe<ContentfulNavItemGroup>;
  readonly node: ContentfulNavItemGroup;
  readonly previous: Maybe<ContentfulNavItemGroup>;
};

type ContentfulNavItemGroupFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly navItemType: InputMaybe<FieldSelectorEnum>;
  readonly navItems: InputMaybe<NavItemFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulNavItemGroupFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly navItemType: InputMaybe<StringQueryOperatorInput>;
  readonly navItems: InputMaybe<NavItemFilterListInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulNavItemGroupGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulNavItemGroupEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulNavItemGroupGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulNavItemGroup>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulNavItemGroupGroupConnection_distinctArgs = {
  field: ContentfulNavItemGroupFieldSelector;
};


type ContentfulNavItemGroupGroupConnection_groupArgs = {
  field: ContentfulNavItemGroupFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulNavItemGroupGroupConnection_maxArgs = {
  field: ContentfulNavItemGroupFieldSelector;
};


type ContentfulNavItemGroupGroupConnection_minArgs = {
  field: ContentfulNavItemGroupFieldSelector;
};


type ContentfulNavItemGroupGroupConnection_sumArgs = {
  field: ContentfulNavItemGroupFieldSelector;
};

type ContentfulNavItemGroupSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly navItemType: InputMaybe<SortOrderEnum>;
  readonly navItems: InputMaybe<NavItemSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulNavItemSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<HomepageImageSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly navItemType: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type ContentfulPage = ContentfulEntry & ContentfulReference & Node & Page & {
  readonly body: Maybe<ContentfulPageBody>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly html: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly slug: Scalars['String'];
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulPageSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulPage_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulPage_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulPageBody = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulPageBodyFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPageBodyFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPageBodySortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulPageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPageEdge>;
  readonly group: ReadonlyArray<ContentfulPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPageConnection_distinctArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageConnection_groupArgs = {
  field: ContentfulPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPageConnection_maxArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageConnection_minArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageConnection_sumArgs = {
  field: ContentfulPageFieldSelector;
};

type ContentfulPageEdge = {
  readonly next: Maybe<ContentfulPage>;
  readonly node: ContentfulPage;
  readonly previous: Maybe<ContentfulPage>;
};

type ContentfulPageFieldSelector = {
  readonly body: InputMaybe<ContentfulPageBodyFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulPageSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPageFilterInput = {
  readonly body: InputMaybe<ContentfulPageBodyFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulPageSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulPageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulPageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulPageGroupConnection_distinctArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageGroupConnection_groupArgs = {
  field: ContentfulPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulPageGroupConnection_maxArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageGroupConnection_minArgs = {
  field: ContentfulPageFieldSelector;
};


type ContentfulPageGroupConnection_sumArgs = {
  field: ContentfulPageFieldSelector;
};

type ContentfulPageSortInput = {
  readonly body: InputMaybe<ContentfulPageBodySortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulPageSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulPageSys = {
  readonly contentType: Maybe<ContentfulPageSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulPageSysContentType = {
  readonly sys: Maybe<ContentfulPageSysContentTypeSys>;
};

type ContentfulPageSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulPageSysContentTypeSysFieldSelector>;
};

type ContentfulPageSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulPageSysContentTypeSysFilterInput>;
};

type ContentfulPageSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulPageSysContentTypeSysSortInput>;
};

type ContentfulPageSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulPageSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPageSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPageSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulPageSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulPageSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulPageSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulPageSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulPageSysSortInput = {
  readonly contentType: InputMaybe<ContentfulPageSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulReference = {
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
};

type ContentfulSocialLink = ContentfulEntry & ContentfulReference & Node & SocialLink & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly service: SocialService;
  readonly username: Scalars['String'];
};

type ContentfulSocialLinkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulSocialLinkEdge>;
  readonly group: ReadonlyArray<ContentfulSocialLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulSocialLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulSocialLinkConnection_distinctArgs = {
  field: ContentfulSocialLinkFieldSelector;
};


type ContentfulSocialLinkConnection_groupArgs = {
  field: ContentfulSocialLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulSocialLinkConnection_maxArgs = {
  field: ContentfulSocialLinkFieldSelector;
};


type ContentfulSocialLinkConnection_minArgs = {
  field: ContentfulSocialLinkFieldSelector;
};


type ContentfulSocialLinkConnection_sumArgs = {
  field: ContentfulSocialLinkFieldSelector;
};

type ContentfulSocialLinkEdge = {
  readonly next: Maybe<ContentfulSocialLink>;
  readonly node: ContentfulSocialLink;
  readonly previous: Maybe<ContentfulSocialLink>;
};

type ContentfulSocialLinkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly service: InputMaybe<FieldSelectorEnum>;
  readonly username: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSocialLinkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly service: InputMaybe<SocialServiceQueryOperatorInput>;
  readonly username: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulSocialLinkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulSocialLinkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulSocialLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulSocialLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulSocialLinkGroupConnection_distinctArgs = {
  field: ContentfulSocialLinkFieldSelector;
};


type ContentfulSocialLinkGroupConnection_groupArgs = {
  field: ContentfulSocialLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulSocialLinkGroupConnection_maxArgs = {
  field: ContentfulSocialLinkFieldSelector;
};


type ContentfulSocialLinkGroupConnection_minArgs = {
  field: ContentfulSocialLinkFieldSelector;
};


type ContentfulSocialLinkGroupConnection_sumArgs = {
  field: ContentfulSocialLinkFieldSelector;
};

type ContentfulSocialLinkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly service: InputMaybe<SortOrderEnum>;
  readonly username: InputMaybe<SortOrderEnum>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type HeaderNavItem = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly navItemType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type HeaderNavItemConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HeaderNavItemEdge>;
  readonly group: ReadonlyArray<HeaderNavItemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HeaderNavItem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HeaderNavItemConnection_distinctArgs = {
  field: HeaderNavItemFieldSelector;
};


type HeaderNavItemConnection_groupArgs = {
  field: HeaderNavItemFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HeaderNavItemConnection_maxArgs = {
  field: HeaderNavItemFieldSelector;
};


type HeaderNavItemConnection_minArgs = {
  field: HeaderNavItemFieldSelector;
};


type HeaderNavItemConnection_sumArgs = {
  field: HeaderNavItemFieldSelector;
};

type HeaderNavItemEdge = {
  readonly next: Maybe<HeaderNavItem>;
  readonly node: HeaderNavItem;
  readonly previous: Maybe<HeaderNavItem>;
};

type HeaderNavItemFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly navItemType: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type HeaderNavItemFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly navItemType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type HeaderNavItemFilterListInput = {
  readonly elemMatch: InputMaybe<HeaderNavItemFilterInput>;
};

type HeaderNavItemGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HeaderNavItemEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HeaderNavItemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HeaderNavItem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HeaderNavItemGroupConnection_distinctArgs = {
  field: HeaderNavItemFieldSelector;
};


type HeaderNavItemGroupConnection_groupArgs = {
  field: HeaderNavItemFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HeaderNavItemGroupConnection_maxArgs = {
  field: HeaderNavItemFieldSelector;
};


type HeaderNavItemGroupConnection_minArgs = {
  field: HeaderNavItemFieldSelector;
};


type HeaderNavItemGroupConnection_sumArgs = {
  field: HeaderNavItemFieldSelector;
};

type HeaderNavItemSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly navItemType: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type Homepage = {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageBlock>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type HomepageBenefit = {
  readonly children: ReadonlyArray<Node>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageBenefitConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageBenefitEdge>;
  readonly group: ReadonlyArray<HomepageBenefitGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageBenefit>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageBenefitConnection_distinctArgs = {
  field: HomepageBenefitFieldSelector;
};


type HomepageBenefitConnection_groupArgs = {
  field: HomepageBenefitFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageBenefitConnection_maxArgs = {
  field: HomepageBenefitFieldSelector;
};


type HomepageBenefitConnection_minArgs = {
  field: HomepageBenefitFieldSelector;
};


type HomepageBenefitConnection_sumArgs = {
  field: HomepageBenefitFieldSelector;
};

type HomepageBenefitEdge = {
  readonly next: Maybe<HomepageBenefit>;
  readonly node: HomepageBenefit;
  readonly previous: Maybe<HomepageBenefit>;
};

type HomepageBenefitFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageBenefitFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageBenefitFilterListInput = {
  readonly elemMatch: InputMaybe<HomepageBenefitFilterInput>;
};

type HomepageBenefitGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageBenefitEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageBenefitGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageBenefit>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageBenefitGroupConnection_distinctArgs = {
  field: HomepageBenefitFieldSelector;
};


type HomepageBenefitGroupConnection_groupArgs = {
  field: HomepageBenefitFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageBenefitGroupConnection_maxArgs = {
  field: HomepageBenefitFieldSelector;
};


type HomepageBenefitGroupConnection_minArgs = {
  field: HomepageBenefitFieldSelector;
};


type HomepageBenefitGroupConnection_sumArgs = {
  field: HomepageBenefitFieldSelector;
};

type HomepageBenefitList = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageBenefit>>>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageBenefitListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageBenefitListEdge>;
  readonly group: ReadonlyArray<HomepageBenefitListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageBenefitList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageBenefitListConnection_distinctArgs = {
  field: HomepageBenefitListFieldSelector;
};


type HomepageBenefitListConnection_groupArgs = {
  field: HomepageBenefitListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageBenefitListConnection_maxArgs = {
  field: HomepageBenefitListFieldSelector;
};


type HomepageBenefitListConnection_minArgs = {
  field: HomepageBenefitListFieldSelector;
};


type HomepageBenefitListConnection_sumArgs = {
  field: HomepageBenefitListFieldSelector;
};

type HomepageBenefitListEdge = {
  readonly next: Maybe<HomepageBenefitList>;
  readonly node: HomepageBenefitList;
  readonly previous: Maybe<HomepageBenefitList>;
};

type HomepageBenefitListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageBenefitFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageBenefitListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageBenefitFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageBenefitListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageBenefitListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageBenefitListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageBenefitList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageBenefitListGroupConnection_distinctArgs = {
  field: HomepageBenefitListFieldSelector;
};


type HomepageBenefitListGroupConnection_groupArgs = {
  field: HomepageBenefitListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageBenefitListGroupConnection_maxArgs = {
  field: HomepageBenefitListFieldSelector;
};


type HomepageBenefitListGroupConnection_minArgs = {
  field: HomepageBenefitListFieldSelector;
};


type HomepageBenefitListGroupConnection_sumArgs = {
  field: HomepageBenefitListFieldSelector;
};

type HomepageBenefitListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageBenefitSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageBenefitSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageBlock = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type HomepageBlockConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageBlockEdge>;
  readonly group: ReadonlyArray<HomepageBlockGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageBlock>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageBlockConnection_distinctArgs = {
  field: HomepageBlockFieldSelector;
};


type HomepageBlockConnection_groupArgs = {
  field: HomepageBlockFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageBlockConnection_maxArgs = {
  field: HomepageBlockFieldSelector;
};


type HomepageBlockConnection_minArgs = {
  field: HomepageBlockFieldSelector;
};


type HomepageBlockConnection_sumArgs = {
  field: HomepageBlockFieldSelector;
};

type HomepageBlockEdge = {
  readonly next: Maybe<HomepageBlock>;
  readonly node: HomepageBlock;
  readonly previous: Maybe<HomepageBlock>;
};

type HomepageBlockFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type HomepageBlockFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type HomepageBlockFilterListInput = {
  readonly elemMatch: InputMaybe<HomepageBlockFilterInput>;
};

type HomepageBlockGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageBlockEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageBlockGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageBlock>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageBlockGroupConnection_distinctArgs = {
  field: HomepageBlockFieldSelector;
};


type HomepageBlockGroupConnection_groupArgs = {
  field: HomepageBlockFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageBlockGroupConnection_maxArgs = {
  field: HomepageBlockFieldSelector;
};


type HomepageBlockGroupConnection_minArgs = {
  field: HomepageBlockFieldSelector;
};


type HomepageBlockGroupConnection_sumArgs = {
  field: HomepageBlockFieldSelector;
};

type HomepageBlockSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type HomepageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageEdge>;
  readonly group: ReadonlyArray<HomepageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Homepage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageConnection_distinctArgs = {
  field: HomepageFieldSelector;
};


type HomepageConnection_groupArgs = {
  field: HomepageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageConnection_maxArgs = {
  field: HomepageFieldSelector;
};


type HomepageConnection_minArgs = {
  field: HomepageFieldSelector;
};


type HomepageConnection_sumArgs = {
  field: HomepageFieldSelector;
};

type HomepageCta = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageCtaConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageCtaEdge>;
  readonly group: ReadonlyArray<HomepageCtaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageCta>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageCtaConnection_distinctArgs = {
  field: HomepageCtaFieldSelector;
};


type HomepageCtaConnection_groupArgs = {
  field: HomepageCtaFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageCtaConnection_maxArgs = {
  field: HomepageCtaFieldSelector;
};


type HomepageCtaConnection_minArgs = {
  field: HomepageCtaFieldSelector;
};


type HomepageCtaConnection_sumArgs = {
  field: HomepageCtaFieldSelector;
};

type HomepageCtaEdge = {
  readonly next: Maybe<HomepageCta>;
  readonly node: HomepageCta;
  readonly previous: Maybe<HomepageCta>;
};

type HomepageCtaFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageCtaFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageCtaGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageCtaEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageCtaGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageCta>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageCtaGroupConnection_distinctArgs = {
  field: HomepageCtaFieldSelector;
};


type HomepageCtaGroupConnection_groupArgs = {
  field: HomepageCtaFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageCtaGroupConnection_maxArgs = {
  field: HomepageCtaFieldSelector;
};


type HomepageCtaGroupConnection_minArgs = {
  field: HomepageCtaFieldSelector;
};


type HomepageCtaGroupConnection_sumArgs = {
  field: HomepageCtaFieldSelector;
};

type HomepageCtaSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageEdge = {
  readonly next: Maybe<Homepage>;
  readonly node: Homepage;
  readonly previous: Maybe<Homepage>;
};

type HomepageFeature = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageFeatureConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageFeatureEdge>;
  readonly group: ReadonlyArray<HomepageFeatureGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageFeature>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageFeatureConnection_distinctArgs = {
  field: HomepageFeatureFieldSelector;
};


type HomepageFeatureConnection_groupArgs = {
  field: HomepageFeatureFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageFeatureConnection_maxArgs = {
  field: HomepageFeatureFieldSelector;
};


type HomepageFeatureConnection_minArgs = {
  field: HomepageFeatureFieldSelector;
};


type HomepageFeatureConnection_sumArgs = {
  field: HomepageFeatureFieldSelector;
};

type HomepageFeatureEdge = {
  readonly next: Maybe<HomepageFeature>;
  readonly node: HomepageFeature;
  readonly previous: Maybe<HomepageFeature>;
};

type HomepageFeatureFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageFeatureFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageFeatureFilterListInput = {
  readonly elemMatch: InputMaybe<HomepageFeatureFilterInput>;
};

type HomepageFeatureGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageFeatureEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageFeatureGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageFeature>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageFeatureGroupConnection_distinctArgs = {
  field: HomepageFeatureFieldSelector;
};


type HomepageFeatureGroupConnection_groupArgs = {
  field: HomepageFeatureFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageFeatureGroupConnection_maxArgs = {
  field: HomepageFeatureFieldSelector;
};


type HomepageFeatureGroupConnection_minArgs = {
  field: HomepageFeatureFieldSelector;
};


type HomepageFeatureGroupConnection_sumArgs = {
  field: HomepageFeatureFieldSelector;
};

type HomepageFeatureList = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageFeature>>>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageFeatureListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageFeatureListEdge>;
  readonly group: ReadonlyArray<HomepageFeatureListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageFeatureList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageFeatureListConnection_distinctArgs = {
  field: HomepageFeatureListFieldSelector;
};


type HomepageFeatureListConnection_groupArgs = {
  field: HomepageFeatureListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageFeatureListConnection_maxArgs = {
  field: HomepageFeatureListFieldSelector;
};


type HomepageFeatureListConnection_minArgs = {
  field: HomepageFeatureListFieldSelector;
};


type HomepageFeatureListConnection_sumArgs = {
  field: HomepageFeatureListFieldSelector;
};

type HomepageFeatureListEdge = {
  readonly next: Maybe<HomepageFeatureList>;
  readonly node: HomepageFeatureList;
  readonly previous: Maybe<HomepageFeatureList>;
};

type HomepageFeatureListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageFeatureFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageFeatureListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageFeatureFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageFeatureListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageFeatureListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageFeatureListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageFeatureList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageFeatureListGroupConnection_distinctArgs = {
  field: HomepageFeatureListFieldSelector;
};


type HomepageFeatureListGroupConnection_groupArgs = {
  field: HomepageFeatureListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageFeatureListGroupConnection_maxArgs = {
  field: HomepageFeatureListFieldSelector;
};


type HomepageFeatureListGroupConnection_minArgs = {
  field: HomepageFeatureListFieldSelector;
};


type HomepageFeatureListGroupConnection_sumArgs = {
  field: HomepageFeatureListFieldSelector;
};

type HomepageFeatureListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageFeatureSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageFeatureSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageBlockFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type HomepageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageBlockFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type HomepageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Homepage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageGroupConnection_distinctArgs = {
  field: HomepageFieldSelector;
};


type HomepageGroupConnection_groupArgs = {
  field: HomepageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageGroupConnection_maxArgs = {
  field: HomepageFieldSelector;
};


type HomepageGroupConnection_minArgs = {
  field: HomepageFieldSelector;
};


type HomepageGroupConnection_sumArgs = {
  field: HomepageFieldSelector;
};

type HomepageHero = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly heading: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly parent: Maybe<Node>;
  readonly subhead: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageHeroConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageHeroEdge>;
  readonly group: ReadonlyArray<HomepageHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageHeroConnection_distinctArgs = {
  field: HomepageHeroFieldSelector;
};


type HomepageHeroConnection_groupArgs = {
  field: HomepageHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageHeroConnection_maxArgs = {
  field: HomepageHeroFieldSelector;
};


type HomepageHeroConnection_minArgs = {
  field: HomepageHeroFieldSelector;
};


type HomepageHeroConnection_sumArgs = {
  field: HomepageHeroFieldSelector;
};

type HomepageHeroEdge = {
  readonly next: Maybe<HomepageHero>;
  readonly node: HomepageHero;
  readonly previous: Maybe<HomepageHero>;
};

type HomepageHeroFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly subhead: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageHeroFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly subhead: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageHeroGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageHeroEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageHeroGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageHero>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageHeroGroupConnection_distinctArgs = {
  field: HomepageHeroFieldSelector;
};


type HomepageHeroGroupConnection_groupArgs = {
  field: HomepageHeroFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageHeroGroupConnection_maxArgs = {
  field: HomepageHeroFieldSelector;
};


type HomepageHeroGroupConnection_minArgs = {
  field: HomepageHeroFieldSelector;
};


type HomepageHeroGroupConnection_sumArgs = {
  field: HomepageHeroFieldSelector;
};

type HomepageHeroSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly subhead: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageImage = {
  readonly alt: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly gatsbyImageData: Maybe<Scalars['GatsbyImageData']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly url: Maybe<Scalars['String']>;
};


type HomepageImage_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  height: InputMaybe<Scalars['Int']>;
  layout: InputMaybe<GatsbyImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};

type HomepageImageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageImageEdge>;
  readonly group: ReadonlyArray<HomepageImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageImageConnection_distinctArgs = {
  field: HomepageImageFieldSelector;
};


type HomepageImageConnection_groupArgs = {
  field: HomepageImageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageImageConnection_maxArgs = {
  field: HomepageImageFieldSelector;
};


type HomepageImageConnection_minArgs = {
  field: HomepageImageFieldSelector;
};


type HomepageImageConnection_sumArgs = {
  field: HomepageImageFieldSelector;
};

type HomepageImageEdge = {
  readonly next: Maybe<HomepageImage>;
  readonly node: HomepageImage;
  readonly previous: Maybe<HomepageImage>;
};

type HomepageImageFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type HomepageImageFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type HomepageImageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageImageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageImageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageImage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageImageGroupConnection_distinctArgs = {
  field: HomepageImageFieldSelector;
};


type HomepageImageGroupConnection_groupArgs = {
  field: HomepageImageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageImageGroupConnection_maxArgs = {
  field: HomepageImageFieldSelector;
};


type HomepageImageGroupConnection_minArgs = {
  field: HomepageImageFieldSelector;
};


type HomepageImageGroupConnection_sumArgs = {
  field: HomepageImageFieldSelector;
};

type HomepageImageSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type HomepageLink = {
  readonly children: ReadonlyArray<Node>;
  readonly href: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageLinkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageLinkEdge>;
  readonly group: ReadonlyArray<HomepageLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageLinkConnection_distinctArgs = {
  field: HomepageLinkFieldSelector;
};


type HomepageLinkConnection_groupArgs = {
  field: HomepageLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageLinkConnection_maxArgs = {
  field: HomepageLinkFieldSelector;
};


type HomepageLinkConnection_minArgs = {
  field: HomepageLinkFieldSelector;
};


type HomepageLinkConnection_sumArgs = {
  field: HomepageLinkFieldSelector;
};

type HomepageLinkEdge = {
  readonly next: Maybe<HomepageLink>;
  readonly node: HomepageLink;
  readonly previous: Maybe<HomepageLink>;
};

type HomepageLinkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageLinkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageLinkFilterListInput = {
  readonly elemMatch: InputMaybe<HomepageLinkFilterInput>;
};

type HomepageLinkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageLinkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageLinkGroupConnection_distinctArgs = {
  field: HomepageLinkFieldSelector;
};


type HomepageLinkGroupConnection_groupArgs = {
  field: HomepageLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageLinkGroupConnection_maxArgs = {
  field: HomepageLinkFieldSelector;
};


type HomepageLinkGroupConnection_minArgs = {
  field: HomepageLinkFieldSelector;
};


type HomepageLinkGroupConnection_sumArgs = {
  field: HomepageLinkFieldSelector;
};

type HomepageLinkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageLogo = {
  readonly alt: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type HomepageLogoConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageLogoEdge>;
  readonly group: ReadonlyArray<HomepageLogoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageLogo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageLogoConnection_distinctArgs = {
  field: HomepageLogoFieldSelector;
};


type HomepageLogoConnection_groupArgs = {
  field: HomepageLogoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageLogoConnection_maxArgs = {
  field: HomepageLogoFieldSelector;
};


type HomepageLogoConnection_minArgs = {
  field: HomepageLogoFieldSelector;
};


type HomepageLogoConnection_sumArgs = {
  field: HomepageLogoFieldSelector;
};

type HomepageLogoEdge = {
  readonly next: Maybe<HomepageLogo>;
  readonly node: HomepageLogo;
  readonly previous: Maybe<HomepageLogo>;
};

type HomepageLogoFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type HomepageLogoFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type HomepageLogoFilterListInput = {
  readonly elemMatch: InputMaybe<HomepageLogoFilterInput>;
};

type HomepageLogoGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageLogoEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageLogoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageLogo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageLogoGroupConnection_distinctArgs = {
  field: HomepageLogoFieldSelector;
};


type HomepageLogoGroupConnection_groupArgs = {
  field: HomepageLogoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageLogoGroupConnection_maxArgs = {
  field: HomepageLogoFieldSelector;
};


type HomepageLogoGroupConnection_minArgs = {
  field: HomepageLogoFieldSelector;
};


type HomepageLogoGroupConnection_sumArgs = {
  field: HomepageLogoFieldSelector;
};

type HomepageLogoList = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly logos: Maybe<ReadonlyArray<Maybe<HomepageLogo>>>;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageLogoListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageLogoListEdge>;
  readonly group: ReadonlyArray<HomepageLogoListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageLogoList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageLogoListConnection_distinctArgs = {
  field: HomepageLogoListFieldSelector;
};


type HomepageLogoListConnection_groupArgs = {
  field: HomepageLogoListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageLogoListConnection_maxArgs = {
  field: HomepageLogoListFieldSelector;
};


type HomepageLogoListConnection_minArgs = {
  field: HomepageLogoListFieldSelector;
};


type HomepageLogoListConnection_sumArgs = {
  field: HomepageLogoListFieldSelector;
};

type HomepageLogoListEdge = {
  readonly next: Maybe<HomepageLogoList>;
  readonly node: HomepageLogoList;
  readonly previous: Maybe<HomepageLogoList>;
};

type HomepageLogoListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly logos: InputMaybe<HomepageLogoFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageLogoListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly logos: InputMaybe<HomepageLogoFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageLogoListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageLogoListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageLogoListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageLogoList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageLogoListGroupConnection_distinctArgs = {
  field: HomepageLogoListFieldSelector;
};


type HomepageLogoListGroupConnection_groupArgs = {
  field: HomepageLogoListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageLogoListGroupConnection_maxArgs = {
  field: HomepageLogoListFieldSelector;
};


type HomepageLogoListGroupConnection_minArgs = {
  field: HomepageLogoListFieldSelector;
};


type HomepageLogoListGroupConnection_sumArgs = {
  field: HomepageLogoListFieldSelector;
};

type HomepageLogoListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly logos: InputMaybe<HomepageLogoSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageLogoSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type HomepageProduct = {
  readonly children: ReadonlyArray<Node>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageProductConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageProductEdge>;
  readonly group: ReadonlyArray<HomepageProductGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageProduct>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageProductConnection_distinctArgs = {
  field: HomepageProductFieldSelector;
};


type HomepageProductConnection_groupArgs = {
  field: HomepageProductFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageProductConnection_maxArgs = {
  field: HomepageProductFieldSelector;
};


type HomepageProductConnection_minArgs = {
  field: HomepageProductFieldSelector;
};


type HomepageProductConnection_sumArgs = {
  field: HomepageProductFieldSelector;
};

type HomepageProductEdge = {
  readonly next: Maybe<HomepageProduct>;
  readonly node: HomepageProduct;
  readonly previous: Maybe<HomepageProduct>;
};

type HomepageProductFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageProductFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageProductFilterListInput = {
  readonly elemMatch: InputMaybe<HomepageProductFilterInput>;
};

type HomepageProductGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageProductEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageProductGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageProduct>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageProductGroupConnection_distinctArgs = {
  field: HomepageProductFieldSelector;
};


type HomepageProductGroupConnection_groupArgs = {
  field: HomepageProductFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageProductGroupConnection_maxArgs = {
  field: HomepageProductFieldSelector;
};


type HomepageProductGroupConnection_minArgs = {
  field: HomepageProductFieldSelector;
};


type HomepageProductGroupConnection_sumArgs = {
  field: HomepageProductFieldSelector;
};

type HomepageProductList = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageProduct>>>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageProductListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageProductListEdge>;
  readonly group: ReadonlyArray<HomepageProductListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageProductList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageProductListConnection_distinctArgs = {
  field: HomepageProductListFieldSelector;
};


type HomepageProductListConnection_groupArgs = {
  field: HomepageProductListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageProductListConnection_maxArgs = {
  field: HomepageProductListFieldSelector;
};


type HomepageProductListConnection_minArgs = {
  field: HomepageProductListFieldSelector;
};


type HomepageProductListConnection_sumArgs = {
  field: HomepageProductListFieldSelector;
};

type HomepageProductListEdge = {
  readonly next: Maybe<HomepageProductList>;
  readonly node: HomepageProductList;
  readonly previous: Maybe<HomepageProductList>;
};

type HomepageProductListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageProductFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageProductListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageProductFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageProductListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageProductListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageProductListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageProductList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageProductListGroupConnection_distinctArgs = {
  field: HomepageProductListFieldSelector;
};


type HomepageProductListGroupConnection_groupArgs = {
  field: HomepageProductListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageProductListGroupConnection_maxArgs = {
  field: HomepageProductListFieldSelector;
};


type HomepageProductListGroupConnection_minArgs = {
  field: HomepageProductListFieldSelector;
};


type HomepageProductListGroupConnection_sumArgs = {
  field: HomepageProductListFieldSelector;
};

type HomepageProductListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageProductSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageProductSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageBlockSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type HomepageStat = {
  readonly children: ReadonlyArray<Node>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly label: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly value: Maybe<Scalars['String']>;
};

type HomepageStatConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageStatEdge>;
  readonly group: ReadonlyArray<HomepageStatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageStat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageStatConnection_distinctArgs = {
  field: HomepageStatFieldSelector;
};


type HomepageStatConnection_groupArgs = {
  field: HomepageStatFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageStatConnection_maxArgs = {
  field: HomepageStatFieldSelector;
};


type HomepageStatConnection_minArgs = {
  field: HomepageStatFieldSelector;
};


type HomepageStatConnection_sumArgs = {
  field: HomepageStatFieldSelector;
};

type HomepageStatEdge = {
  readonly next: Maybe<HomepageStat>;
  readonly node: HomepageStat;
  readonly previous: Maybe<HomepageStat>;
};

type HomepageStatFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type HomepageStatFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type HomepageStatFilterListInput = {
  readonly elemMatch: InputMaybe<HomepageStatFilterInput>;
};

type HomepageStatGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageStatEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageStatGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageStat>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageStatGroupConnection_distinctArgs = {
  field: HomepageStatFieldSelector;
};


type HomepageStatGroupConnection_groupArgs = {
  field: HomepageStatFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageStatGroupConnection_maxArgs = {
  field: HomepageStatFieldSelector;
};


type HomepageStatGroupConnection_minArgs = {
  field: HomepageStatFieldSelector;
};


type HomepageStatGroupConnection_sumArgs = {
  field: HomepageStatFieldSelector;
};

type HomepageStatList = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageStat>>>;
  readonly heading: Maybe<Scalars['String']>;
  readonly icon: Maybe<HomepageImage>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type HomepageStatListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageStatListEdge>;
  readonly group: ReadonlyArray<HomepageStatListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageStatList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageStatListConnection_distinctArgs = {
  field: HomepageStatListFieldSelector;
};


type HomepageStatListConnection_groupArgs = {
  field: HomepageStatListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageStatListConnection_maxArgs = {
  field: HomepageStatListFieldSelector;
};


type HomepageStatListConnection_minArgs = {
  field: HomepageStatListFieldSelector;
};


type HomepageStatListConnection_sumArgs = {
  field: HomepageStatListFieldSelector;
};

type HomepageStatListEdge = {
  readonly next: Maybe<HomepageStatList>;
  readonly node: HomepageStatList;
  readonly previous: Maybe<HomepageStatList>;
};

type HomepageStatListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageStatFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<HomepageImageFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type HomepageStatListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageStatFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<HomepageImageFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type HomepageStatListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageStatListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageStatListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageStatList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageStatListGroupConnection_distinctArgs = {
  field: HomepageStatListFieldSelector;
};


type HomepageStatListGroupConnection_groupArgs = {
  field: HomepageStatListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageStatListGroupConnection_maxArgs = {
  field: HomepageStatListFieldSelector;
};


type HomepageStatListGroupConnection_minArgs = {
  field: HomepageStatListFieldSelector;
};


type HomepageStatListGroupConnection_sumArgs = {
  field: HomepageStatListFieldSelector;
};

type HomepageStatListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageStatSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<HomepageImageSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type HomepageStatSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly label: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type HomepageTestimonial = {
  readonly avatar: Maybe<HomepageImage>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly quote: Maybe<Scalars['String']>;
  readonly source: Maybe<Scalars['String']>;
};

type HomepageTestimonialConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageTestimonialEdge>;
  readonly group: ReadonlyArray<HomepageTestimonialGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageTestimonial>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageTestimonialConnection_distinctArgs = {
  field: HomepageTestimonialFieldSelector;
};


type HomepageTestimonialConnection_groupArgs = {
  field: HomepageTestimonialFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageTestimonialConnection_maxArgs = {
  field: HomepageTestimonialFieldSelector;
};


type HomepageTestimonialConnection_minArgs = {
  field: HomepageTestimonialFieldSelector;
};


type HomepageTestimonialConnection_sumArgs = {
  field: HomepageTestimonialFieldSelector;
};

type HomepageTestimonialEdge = {
  readonly next: Maybe<HomepageTestimonial>;
  readonly node: HomepageTestimonial;
  readonly previous: Maybe<HomepageTestimonial>;
};

type HomepageTestimonialFieldSelector = {
  readonly avatar: InputMaybe<HomepageImageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly quote: InputMaybe<FieldSelectorEnum>;
  readonly source: InputMaybe<FieldSelectorEnum>;
};

type HomepageTestimonialFilterInput = {
  readonly avatar: InputMaybe<HomepageImageFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly quote: InputMaybe<StringQueryOperatorInput>;
  readonly source: InputMaybe<StringQueryOperatorInput>;
};

type HomepageTestimonialFilterListInput = {
  readonly elemMatch: InputMaybe<HomepageTestimonialFilterInput>;
};

type HomepageTestimonialGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageTestimonialEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageTestimonialGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageTestimonial>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageTestimonialGroupConnection_distinctArgs = {
  field: HomepageTestimonialFieldSelector;
};


type HomepageTestimonialGroupConnection_groupArgs = {
  field: HomepageTestimonialFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageTestimonialGroupConnection_maxArgs = {
  field: HomepageTestimonialFieldSelector;
};


type HomepageTestimonialGroupConnection_minArgs = {
  field: HomepageTestimonialFieldSelector;
};


type HomepageTestimonialGroupConnection_sumArgs = {
  field: HomepageTestimonialFieldSelector;
};

type HomepageTestimonialList = {
  readonly blocktype: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<ReadonlyArray<Maybe<HomepageTestimonial>>>;
  readonly heading: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly kicker: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type HomepageTestimonialListConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageTestimonialListEdge>;
  readonly group: ReadonlyArray<HomepageTestimonialListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageTestimonialList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageTestimonialListConnection_distinctArgs = {
  field: HomepageTestimonialListFieldSelector;
};


type HomepageTestimonialListConnection_groupArgs = {
  field: HomepageTestimonialListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageTestimonialListConnection_maxArgs = {
  field: HomepageTestimonialListFieldSelector;
};


type HomepageTestimonialListConnection_minArgs = {
  field: HomepageTestimonialListFieldSelector;
};


type HomepageTestimonialListConnection_sumArgs = {
  field: HomepageTestimonialListFieldSelector;
};

type HomepageTestimonialListEdge = {
  readonly next: Maybe<HomepageTestimonialList>;
  readonly node: HomepageTestimonialList;
  readonly previous: Maybe<HomepageTestimonialList>;
};

type HomepageTestimonialListFieldSelector = {
  readonly blocktype: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly content: InputMaybe<HomepageTestimonialFieldSelector>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly kicker: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type HomepageTestimonialListFilterInput = {
  readonly blocktype: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<HomepageTestimonialFilterListInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly kicker: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type HomepageTestimonialListGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HomepageTestimonialListEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HomepageTestimonialListGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HomepageTestimonialList>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HomepageTestimonialListGroupConnection_distinctArgs = {
  field: HomepageTestimonialListFieldSelector;
};


type HomepageTestimonialListGroupConnection_groupArgs = {
  field: HomepageTestimonialListFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HomepageTestimonialListGroupConnection_maxArgs = {
  field: HomepageTestimonialListFieldSelector;
};


type HomepageTestimonialListGroupConnection_minArgs = {
  field: HomepageTestimonialListFieldSelector;
};


type HomepageTestimonialListGroupConnection_sumArgs = {
  field: HomepageTestimonialListFieldSelector;
};

type HomepageTestimonialListSortInput = {
  readonly blocktype: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly content: InputMaybe<HomepageTestimonialSortInput>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly kicker: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type HomepageTestimonialSortInput = {
  readonly avatar: InputMaybe<HomepageImageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly quote: InputMaybe<SortOrderEnum>;
  readonly source: InputMaybe<SortOrderEnum>;
};

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageResizingBehavior =
  /** Crop a part of the original image to match the specified size. */
  | 'crop'
  /** Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled. */
  | 'fill'
  | ''
  /** Same as the default resizing, but adds padding so that the generated image has the specified dimensions. */
  | 'pad'
  /** Scale the image regardless of the original aspect ratio. */
  | 'scale'
  /** When used in association with the f parameter below, creates a thumbnail from the image based on a focus area. */
  | 'thumb';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type Layout = {
  readonly children: ReadonlyArray<Node>;
  readonly footer: Maybe<LayoutFooter>;
  readonly header: Maybe<LayoutHeader>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type LayoutConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayoutEdge>;
  readonly group: ReadonlyArray<LayoutGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Layout>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayoutConnection_distinctArgs = {
  field: LayoutFieldSelector;
};


type LayoutConnection_groupArgs = {
  field: LayoutFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayoutConnection_maxArgs = {
  field: LayoutFieldSelector;
};


type LayoutConnection_minArgs = {
  field: LayoutFieldSelector;
};


type LayoutConnection_sumArgs = {
  field: LayoutFieldSelector;
};

type LayoutEdge = {
  readonly next: Maybe<Layout>;
  readonly node: Layout;
  readonly previous: Maybe<Layout>;
};

type LayoutFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly footer: InputMaybe<LayoutFooterFieldSelector>;
  readonly header: InputMaybe<LayoutHeaderFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type LayoutFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly footer: InputMaybe<LayoutFooterFilterInput>;
  readonly header: InputMaybe<LayoutHeaderFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type LayoutFooter = {
  readonly children: ReadonlyArray<Node>;
  readonly copyright: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly links: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly meta: Maybe<ReadonlyArray<Maybe<HomepageLink>>>;
  readonly parent: Maybe<Node>;
  readonly socialLinks: Maybe<ReadonlyArray<Maybe<SocialLink>>>;
};

type LayoutFooterConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayoutFooterEdge>;
  readonly group: ReadonlyArray<LayoutFooterGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LayoutFooter>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayoutFooterConnection_distinctArgs = {
  field: LayoutFooterFieldSelector;
};


type LayoutFooterConnection_groupArgs = {
  field: LayoutFooterFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayoutFooterConnection_maxArgs = {
  field: LayoutFooterFieldSelector;
};


type LayoutFooterConnection_minArgs = {
  field: LayoutFooterFieldSelector;
};


type LayoutFooterConnection_sumArgs = {
  field: LayoutFooterFieldSelector;
};

type LayoutFooterEdge = {
  readonly next: Maybe<LayoutFooter>;
  readonly node: LayoutFooter;
  readonly previous: Maybe<LayoutFooter>;
};

type LayoutFooterFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly copyright: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly links: InputMaybe<HomepageLinkFieldSelector>;
  readonly meta: InputMaybe<HomepageLinkFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly socialLinks: InputMaybe<SocialLinkFieldSelector>;
};

type LayoutFooterFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly copyright: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly links: InputMaybe<HomepageLinkFilterListInput>;
  readonly meta: InputMaybe<HomepageLinkFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly socialLinks: InputMaybe<SocialLinkFilterListInput>;
};

type LayoutFooterGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayoutFooterEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<LayoutFooterGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LayoutFooter>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayoutFooterGroupConnection_distinctArgs = {
  field: LayoutFooterFieldSelector;
};


type LayoutFooterGroupConnection_groupArgs = {
  field: LayoutFooterFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayoutFooterGroupConnection_maxArgs = {
  field: LayoutFooterFieldSelector;
};


type LayoutFooterGroupConnection_minArgs = {
  field: LayoutFooterFieldSelector;
};


type LayoutFooterGroupConnection_sumArgs = {
  field: LayoutFooterFieldSelector;
};

type LayoutFooterSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly copyright: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly links: InputMaybe<HomepageLinkSortInput>;
  readonly meta: InputMaybe<HomepageLinkSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly socialLinks: InputMaybe<SocialLinkSortInput>;
};

type LayoutGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayoutEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<LayoutGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Layout>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayoutGroupConnection_distinctArgs = {
  field: LayoutFieldSelector;
};


type LayoutGroupConnection_groupArgs = {
  field: LayoutFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayoutGroupConnection_maxArgs = {
  field: LayoutFieldSelector;
};


type LayoutGroupConnection_minArgs = {
  field: LayoutFieldSelector;
};


type LayoutGroupConnection_sumArgs = {
  field: LayoutFieldSelector;
};

type LayoutHeader = {
  readonly children: ReadonlyArray<Node>;
  readonly cta: Maybe<HomepageLink>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly navItems: Maybe<ReadonlyArray<Maybe<HeaderNavItem>>>;
  readonly parent: Maybe<Node>;
};

type LayoutHeaderConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayoutHeaderEdge>;
  readonly group: ReadonlyArray<LayoutHeaderGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LayoutHeader>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayoutHeaderConnection_distinctArgs = {
  field: LayoutHeaderFieldSelector;
};


type LayoutHeaderConnection_groupArgs = {
  field: LayoutHeaderFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayoutHeaderConnection_maxArgs = {
  field: LayoutHeaderFieldSelector;
};


type LayoutHeaderConnection_minArgs = {
  field: LayoutHeaderFieldSelector;
};


type LayoutHeaderConnection_sumArgs = {
  field: LayoutHeaderFieldSelector;
};

type LayoutHeaderEdge = {
  readonly next: Maybe<LayoutHeader>;
  readonly node: LayoutHeader;
  readonly previous: Maybe<LayoutHeader>;
};

type LayoutHeaderFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly cta: InputMaybe<HomepageLinkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly navItems: InputMaybe<HeaderNavItemFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type LayoutHeaderFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly cta: InputMaybe<HomepageLinkFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly navItems: InputMaybe<HeaderNavItemFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type LayoutHeaderGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayoutHeaderEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<LayoutHeaderGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LayoutHeader>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayoutHeaderGroupConnection_distinctArgs = {
  field: LayoutHeaderFieldSelector;
};


type LayoutHeaderGroupConnection_groupArgs = {
  field: LayoutHeaderFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayoutHeaderGroupConnection_maxArgs = {
  field: LayoutHeaderFieldSelector;
};


type LayoutHeaderGroupConnection_minArgs = {
  field: LayoutHeaderFieldSelector;
};


type LayoutHeaderGroupConnection_sumArgs = {
  field: LayoutHeaderFieldSelector;
};

type LayoutHeaderSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly cta: InputMaybe<HomepageLinkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly navItems: InputMaybe<HeaderNavItemSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type LayoutSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly footer: InputMaybe<LayoutFooterSortInput>;
  readonly header: InputMaybe<LayoutHeaderSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type NavItem = {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly href: Maybe<Scalars['String']>;
  readonly icon: Maybe<HomepageImage>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly navItemType: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type NavItemConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<NavItemEdge>;
  readonly group: ReadonlyArray<NavItemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<NavItem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type NavItemConnection_distinctArgs = {
  field: NavItemFieldSelector;
};


type NavItemConnection_groupArgs = {
  field: NavItemFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type NavItemConnection_maxArgs = {
  field: NavItemFieldSelector;
};


type NavItemConnection_minArgs = {
  field: NavItemFieldSelector;
};


type NavItemConnection_sumArgs = {
  field: NavItemFieldSelector;
};

type NavItemEdge = {
  readonly next: Maybe<NavItem>;
  readonly node: NavItem;
  readonly previous: Maybe<NavItem>;
};

type NavItemFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<HomepageImageFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly navItemType: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type NavItemFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<HomepageImageFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly navItemType: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type NavItemFilterListInput = {
  readonly elemMatch: InputMaybe<NavItemFilterInput>;
};

type NavItemGroup = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly navItemType: Maybe<Scalars['String']>;
  readonly navItems: Maybe<ReadonlyArray<Maybe<NavItem>>>;
  readonly parent: Maybe<Node>;
};

type NavItemGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<NavItemEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<NavItemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<NavItem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type NavItemGroupConnection_distinctArgs = {
  field: NavItemFieldSelector;
};


type NavItemGroupConnection_groupArgs = {
  field: NavItemFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type NavItemGroupConnection_maxArgs = {
  field: NavItemFieldSelector;
};


type NavItemGroupConnection_minArgs = {
  field: NavItemFieldSelector;
};


type NavItemGroupConnection_sumArgs = {
  field: NavItemFieldSelector;
};

type NavItemGroupFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly navItemType: InputMaybe<StringQueryOperatorInput>;
  readonly navItems: InputMaybe<NavItemFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NavItemGroupSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly navItemType: InputMaybe<SortOrderEnum>;
  readonly navItems: InputMaybe<NavItemSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type NavItemSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<HomepageImageSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly navItemType: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type Page = {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly html: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<HomepageImage>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly slug: Scalars['String'];
  readonly title: Maybe<Scalars['String']>;
};

type PageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PageEdge>;
  readonly group: ReadonlyArray<PageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Page>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PageConnection_distinctArgs = {
  field: PageFieldSelector;
};


type PageConnection_groupArgs = {
  field: PageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PageConnection_maxArgs = {
  field: PageFieldSelector;
};


type PageConnection_minArgs = {
  field: PageFieldSelector;
};


type PageConnection_sumArgs = {
  field: PageFieldSelector;
};

type PageEdge = {
  readonly next: Maybe<Page>;
  readonly node: Page;
  readonly previous: Maybe<Page>;
};

type PageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<HomepageImageFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type PageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<HomepageImageFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type PageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Page>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PageGroupConnection_distinctArgs = {
  field: PageFieldSelector;
};


type PageGroupConnection_groupArgs = {
  field: PageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PageGroupConnection_maxArgs = {
  field: PageFieldSelector;
};


type PageGroupConnection_minArgs = {
  field: PageFieldSelector;
};


type PageGroupConnection_sumArgs = {
  field: PageFieldSelector;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type PageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<HomepageImageSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly aboutHero: Maybe<AboutHero>;
  readonly aboutLeadership: Maybe<AboutLeadership>;
  readonly aboutLogoList: Maybe<AboutLogoList>;
  readonly aboutPage: Maybe<AboutPage>;
  readonly aboutProfile: Maybe<AboutProfile>;
  readonly aboutStat: Maybe<AboutStat>;
  readonly aboutStatList: Maybe<AboutStatList>;
  readonly allAboutHero: AboutHeroConnection;
  readonly allAboutLeadership: AboutLeadershipConnection;
  readonly allAboutLogoList: AboutLogoListConnection;
  readonly allAboutPage: AboutPageConnection;
  readonly allAboutProfile: AboutProfileConnection;
  readonly allAboutStat: AboutStatConnection;
  readonly allAboutStatList: AboutStatListConnection;
  readonly allContentfulAboutHero: ContentfulAboutHeroConnection;
  readonly allContentfulAboutLeadership: ContentfulAboutLeadershipConnection;
  readonly allContentfulAboutLogoList: ContentfulAboutLogoListConnection;
  readonly allContentfulAboutPage: ContentfulAboutPageConnection;
  readonly allContentfulAboutProfile: ContentfulAboutProfileConnection;
  readonly allContentfulAboutStat: ContentfulAboutStatConnection;
  readonly allContentfulAboutStatList: ContentfulAboutStatListConnection;
  readonly allContentfulAsset: ContentfulAssetConnection;
  readonly allContentfulContentType: ContentfulContentTypeConnection;
  readonly allContentfulEntry: ContentfulEntryConnection;
  readonly allContentfulHomepage: ContentfulHomepageConnection;
  readonly allContentfulHomepageBenefit: ContentfulHomepageBenefitConnection;
  readonly allContentfulHomepageBenefitList: ContentfulHomepageBenefitListConnection;
  readonly allContentfulHomepageCta: ContentfulHomepageCtaConnection;
  readonly allContentfulHomepageFeature: ContentfulHomepageFeatureConnection;
  readonly allContentfulHomepageFeatureList: ContentfulHomepageFeatureListConnection;
  readonly allContentfulHomepageHero: ContentfulHomepageHeroConnection;
  readonly allContentfulHomepageLink: ContentfulHomepageLinkConnection;
  readonly allContentfulHomepageLinkGroup: ContentfulHomepageLinkGroupConnection;
  readonly allContentfulHomepageLogo: ContentfulHomepageLogoConnection;
  readonly allContentfulHomepageLogoList: ContentfulHomepageLogoListConnection;
  readonly allContentfulHomepageProduct: ContentfulHomepageProductConnection;
  readonly allContentfulHomepageProductList: ContentfulHomepageProductListConnection;
  readonly allContentfulHomepageStat: ContentfulHomepageStatConnection;
  readonly allContentfulHomepageStatList: ContentfulHomepageStatListConnection;
  readonly allContentfulHomepageTestimonial: ContentfulHomepageTestimonialConnection;
  readonly allContentfulHomepageTestimonialList: ContentfulHomepageTestimonialListConnection;
  readonly allContentfulLayout: ContentfulLayoutConnection;
  readonly allContentfulLayoutFooter: ContentfulLayoutFooterConnection;
  readonly allContentfulLayoutHeader: ContentfulLayoutHeaderConnection;
  readonly allContentfulLink: ContentfulLinkConnection;
  readonly allContentfulNavItem: ContentfulNavItemConnection;
  readonly allContentfulNavItemGroup: ContentfulNavItemGroupConnection;
  readonly allContentfulPage: ContentfulPageConnection;
  readonly allContentfulSocialLink: ContentfulSocialLinkConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allHeaderNavItem: HeaderNavItemConnection;
  readonly allHomepage: HomepageConnection;
  readonly allHomepageBenefit: HomepageBenefitConnection;
  readonly allHomepageBenefitList: HomepageBenefitListConnection;
  readonly allHomepageBlock: HomepageBlockConnection;
  readonly allHomepageCta: HomepageCtaConnection;
  readonly allHomepageFeature: HomepageFeatureConnection;
  readonly allHomepageFeatureList: HomepageFeatureListConnection;
  readonly allHomepageHero: HomepageHeroConnection;
  readonly allHomepageImage: HomepageImageConnection;
  readonly allHomepageLink: HomepageLinkConnection;
  readonly allHomepageLogo: HomepageLogoConnection;
  readonly allHomepageLogoList: HomepageLogoListConnection;
  readonly allHomepageProduct: HomepageProductConnection;
  readonly allHomepageProductList: HomepageProductListConnection;
  readonly allHomepageStat: HomepageStatConnection;
  readonly allHomepageStatList: HomepageStatListConnection;
  readonly allHomepageTestimonial: HomepageTestimonialConnection;
  readonly allHomepageTestimonialList: HomepageTestimonialListConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allLayout: LayoutConnection;
  readonly allLayoutFooter: LayoutFooterConnection;
  readonly allLayoutHeader: LayoutHeaderConnection;
  readonly allNavItem: NavItemConnection;
  readonly allNavItemGroup: NavItemGroupConnection;
  readonly allPage: PageConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allSocialLink: SocialLinkConnection;
  readonly contentfulAboutHero: Maybe<ContentfulAboutHero>;
  readonly contentfulAboutLeadership: Maybe<ContentfulAboutLeadership>;
  readonly contentfulAboutLogoList: Maybe<ContentfulAboutLogoList>;
  readonly contentfulAboutPage: Maybe<ContentfulAboutPage>;
  readonly contentfulAboutProfile: Maybe<ContentfulAboutProfile>;
  readonly contentfulAboutStat: Maybe<ContentfulAboutStat>;
  readonly contentfulAboutStatList: Maybe<ContentfulAboutStatList>;
  readonly contentfulAsset: Maybe<ContentfulAsset>;
  readonly contentfulContentType: Maybe<ContentfulContentType>;
  readonly contentfulEntry: Maybe<ContentfulEntry>;
  readonly contentfulHomepage: Maybe<ContentfulHomepage>;
  readonly contentfulHomepageBenefit: Maybe<ContentfulHomepageBenefit>;
  readonly contentfulHomepageBenefitList: Maybe<ContentfulHomepageBenefitList>;
  readonly contentfulHomepageCta: Maybe<ContentfulHomepageCta>;
  readonly contentfulHomepageFeature: Maybe<ContentfulHomepageFeature>;
  readonly contentfulHomepageFeatureList: Maybe<ContentfulHomepageFeatureList>;
  readonly contentfulHomepageHero: Maybe<ContentfulHomepageHero>;
  readonly contentfulHomepageLink: Maybe<ContentfulHomepageLink>;
  readonly contentfulHomepageLinkGroup: Maybe<ContentfulHomepageLinkGroup>;
  readonly contentfulHomepageLogo: Maybe<ContentfulHomepageLogo>;
  readonly contentfulHomepageLogoList: Maybe<ContentfulHomepageLogoList>;
  readonly contentfulHomepageProduct: Maybe<ContentfulHomepageProduct>;
  readonly contentfulHomepageProductList: Maybe<ContentfulHomepageProductList>;
  readonly contentfulHomepageStat: Maybe<ContentfulHomepageStat>;
  readonly contentfulHomepageStatList: Maybe<ContentfulHomepageStatList>;
  readonly contentfulHomepageTestimonial: Maybe<ContentfulHomepageTestimonial>;
  readonly contentfulHomepageTestimonialList: Maybe<ContentfulHomepageTestimonialList>;
  readonly contentfulLayout: Maybe<ContentfulLayout>;
  readonly contentfulLayoutFooter: Maybe<ContentfulLayoutFooter>;
  readonly contentfulLayoutHeader: Maybe<ContentfulLayoutHeader>;
  readonly contentfulLink: Maybe<ContentfulLink>;
  readonly contentfulNavItem: Maybe<ContentfulNavItem>;
  readonly contentfulNavItemGroup: Maybe<ContentfulNavItemGroup>;
  readonly contentfulPage: Maybe<ContentfulPage>;
  readonly contentfulSocialLink: Maybe<ContentfulSocialLink>;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly headerNavItem: Maybe<HeaderNavItem>;
  readonly homepage: Maybe<Homepage>;
  readonly homepageBenefit: Maybe<HomepageBenefit>;
  readonly homepageBenefitList: Maybe<HomepageBenefitList>;
  readonly homepageBlock: Maybe<HomepageBlock>;
  readonly homepageCta: Maybe<HomepageCta>;
  readonly homepageFeature: Maybe<HomepageFeature>;
  readonly homepageFeatureList: Maybe<HomepageFeatureList>;
  readonly homepageHero: Maybe<HomepageHero>;
  readonly homepageImage: Maybe<HomepageImage>;
  readonly homepageLink: Maybe<HomepageLink>;
  readonly homepageLogo: Maybe<HomepageLogo>;
  readonly homepageLogoList: Maybe<HomepageLogoList>;
  readonly homepageProduct: Maybe<HomepageProduct>;
  readonly homepageProductList: Maybe<HomepageProductList>;
  readonly homepageStat: Maybe<HomepageStat>;
  readonly homepageStatList: Maybe<HomepageStatList>;
  readonly homepageTestimonial: Maybe<HomepageTestimonial>;
  readonly homepageTestimonialList: Maybe<HomepageTestimonialList>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly layout: Maybe<Layout>;
  readonly layoutFooter: Maybe<LayoutFooter>;
  readonly layoutHeader: Maybe<LayoutHeader>;
  readonly navItem: Maybe<NavItem>;
  readonly navItemGroup: Maybe<NavItemGroup>;
  readonly page: Maybe<Page>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly socialLink: Maybe<SocialLink>;
};


type Query_aboutHeroArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_aboutLeadershipArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<AboutProfileFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  subhead: InputMaybe<StringQueryOperatorInput>;
};


type Query_aboutLogoListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  logos: InputMaybe<HomepageLogoFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_aboutPageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageBlockFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_aboutProfileArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  jobTitle: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_aboutStatArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  value: InputMaybe<StringQueryOperatorInput>;
};


type Query_aboutStatListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<AboutStatFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_allAboutHeroArgs = {
  filter: InputMaybe<AboutHeroFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AboutHeroSortInput>>>;
};


type Query_allAboutLeadershipArgs = {
  filter: InputMaybe<AboutLeadershipFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AboutLeadershipSortInput>>>;
};


type Query_allAboutLogoListArgs = {
  filter: InputMaybe<AboutLogoListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AboutLogoListSortInput>>>;
};


type Query_allAboutPageArgs = {
  filter: InputMaybe<AboutPageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AboutPageSortInput>>>;
};


type Query_allAboutProfileArgs = {
  filter: InputMaybe<AboutProfileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AboutProfileSortInput>>>;
};


type Query_allAboutStatArgs = {
  filter: InputMaybe<AboutStatFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AboutStatSortInput>>>;
};


type Query_allAboutStatListArgs = {
  filter: InputMaybe<AboutStatListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AboutStatListSortInput>>>;
};


type Query_allContentfulAboutHeroArgs = {
  filter: InputMaybe<ContentfulAboutHeroFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAboutHeroSortInput>>>;
};


type Query_allContentfulAboutLeadershipArgs = {
  filter: InputMaybe<ContentfulAboutLeadershipFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAboutLeadershipSortInput>>>;
};


type Query_allContentfulAboutLogoListArgs = {
  filter: InputMaybe<ContentfulAboutLogoListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAboutLogoListSortInput>>>;
};


type Query_allContentfulAboutPageArgs = {
  filter: InputMaybe<ContentfulAboutPageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAboutPageSortInput>>>;
};


type Query_allContentfulAboutProfileArgs = {
  filter: InputMaybe<ContentfulAboutProfileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAboutProfileSortInput>>>;
};


type Query_allContentfulAboutStatArgs = {
  filter: InputMaybe<ContentfulAboutStatFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAboutStatSortInput>>>;
};


type Query_allContentfulAboutStatListArgs = {
  filter: InputMaybe<ContentfulAboutStatListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAboutStatListSortInput>>>;
};


type Query_allContentfulAssetArgs = {
  filter: InputMaybe<ContentfulAssetFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAssetSortInput>>>;
};


type Query_allContentfulContentTypeArgs = {
  filter: InputMaybe<ContentfulContentTypeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulContentTypeSortInput>>>;
};


type Query_allContentfulEntryArgs = {
  filter: InputMaybe<ContentfulEntryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulEntrySortInput>>>;
};


type Query_allContentfulHomepageArgs = {
  filter: InputMaybe<ContentfulHomepageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageSortInput>>>;
};


type Query_allContentfulHomepageBenefitArgs = {
  filter: InputMaybe<ContentfulHomepageBenefitFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageBenefitSortInput>>>;
};


type Query_allContentfulHomepageBenefitListArgs = {
  filter: InputMaybe<ContentfulHomepageBenefitListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageBenefitListSortInput>>>;
};


type Query_allContentfulHomepageCtaArgs = {
  filter: InputMaybe<ContentfulHomepageCtaFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageCtaSortInput>>>;
};


type Query_allContentfulHomepageFeatureArgs = {
  filter: InputMaybe<ContentfulHomepageFeatureFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageFeatureSortInput>>>;
};


type Query_allContentfulHomepageFeatureListArgs = {
  filter: InputMaybe<ContentfulHomepageFeatureListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageFeatureListSortInput>>>;
};


type Query_allContentfulHomepageHeroArgs = {
  filter: InputMaybe<ContentfulHomepageHeroFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageHeroSortInput>>>;
};


type Query_allContentfulHomepageLinkArgs = {
  filter: InputMaybe<ContentfulHomepageLinkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageLinkSortInput>>>;
};


type Query_allContentfulHomepageLinkGroupArgs = {
  filter: InputMaybe<ContentfulHomepageLinkGroupFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageLinkGroupSortInput>>>;
};


type Query_allContentfulHomepageLogoArgs = {
  filter: InputMaybe<ContentfulHomepageLogoFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageLogoSortInput>>>;
};


type Query_allContentfulHomepageLogoListArgs = {
  filter: InputMaybe<ContentfulHomepageLogoListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageLogoListSortInput>>>;
};


type Query_allContentfulHomepageProductArgs = {
  filter: InputMaybe<ContentfulHomepageProductFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageProductSortInput>>>;
};


type Query_allContentfulHomepageProductListArgs = {
  filter: InputMaybe<ContentfulHomepageProductListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageProductListSortInput>>>;
};


type Query_allContentfulHomepageStatArgs = {
  filter: InputMaybe<ContentfulHomepageStatFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageStatSortInput>>>;
};


type Query_allContentfulHomepageStatListArgs = {
  filter: InputMaybe<ContentfulHomepageStatListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageStatListSortInput>>>;
};


type Query_allContentfulHomepageTestimonialArgs = {
  filter: InputMaybe<ContentfulHomepageTestimonialFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageTestimonialSortInput>>>;
};


type Query_allContentfulHomepageTestimonialListArgs = {
  filter: InputMaybe<ContentfulHomepageTestimonialListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomepageTestimonialListSortInput>>>;
};


type Query_allContentfulLayoutArgs = {
  filter: InputMaybe<ContentfulLayoutFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLayoutSortInput>>>;
};


type Query_allContentfulLayoutFooterArgs = {
  filter: InputMaybe<ContentfulLayoutFooterFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLayoutFooterSortInput>>>;
};


type Query_allContentfulLayoutHeaderArgs = {
  filter: InputMaybe<ContentfulLayoutHeaderFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLayoutHeaderSortInput>>>;
};


type Query_allContentfulLinkArgs = {
  filter: InputMaybe<ContentfulLinkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLinkSortInput>>>;
};


type Query_allContentfulNavItemArgs = {
  filter: InputMaybe<ContentfulNavItemFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulNavItemSortInput>>>;
};


type Query_allContentfulNavItemGroupArgs = {
  filter: InputMaybe<ContentfulNavItemGroupFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulNavItemGroupSortInput>>>;
};


type Query_allContentfulPageArgs = {
  filter: InputMaybe<ContentfulPageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPageSortInput>>>;
};


type Query_allContentfulSocialLinkArgs = {
  filter: InputMaybe<ContentfulSocialLinkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulSocialLinkSortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allHeaderNavItemArgs = {
  filter: InputMaybe<HeaderNavItemFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HeaderNavItemSortInput>>>;
};


type Query_allHomepageArgs = {
  filter: InputMaybe<HomepageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageSortInput>>>;
};


type Query_allHomepageBenefitArgs = {
  filter: InputMaybe<HomepageBenefitFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageBenefitSortInput>>>;
};


type Query_allHomepageBenefitListArgs = {
  filter: InputMaybe<HomepageBenefitListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageBenefitListSortInput>>>;
};


type Query_allHomepageBlockArgs = {
  filter: InputMaybe<HomepageBlockFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageBlockSortInput>>>;
};


type Query_allHomepageCtaArgs = {
  filter: InputMaybe<HomepageCtaFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageCtaSortInput>>>;
};


type Query_allHomepageFeatureArgs = {
  filter: InputMaybe<HomepageFeatureFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageFeatureSortInput>>>;
};


type Query_allHomepageFeatureListArgs = {
  filter: InputMaybe<HomepageFeatureListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageFeatureListSortInput>>>;
};


type Query_allHomepageHeroArgs = {
  filter: InputMaybe<HomepageHeroFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageHeroSortInput>>>;
};


type Query_allHomepageImageArgs = {
  filter: InputMaybe<HomepageImageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageImageSortInput>>>;
};


type Query_allHomepageLinkArgs = {
  filter: InputMaybe<HomepageLinkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageLinkSortInput>>>;
};


type Query_allHomepageLogoArgs = {
  filter: InputMaybe<HomepageLogoFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageLogoSortInput>>>;
};


type Query_allHomepageLogoListArgs = {
  filter: InputMaybe<HomepageLogoListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageLogoListSortInput>>>;
};


type Query_allHomepageProductArgs = {
  filter: InputMaybe<HomepageProductFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageProductSortInput>>>;
};


type Query_allHomepageProductListArgs = {
  filter: InputMaybe<HomepageProductListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageProductListSortInput>>>;
};


type Query_allHomepageStatArgs = {
  filter: InputMaybe<HomepageStatFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageStatSortInput>>>;
};


type Query_allHomepageStatListArgs = {
  filter: InputMaybe<HomepageStatListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageStatListSortInput>>>;
};


type Query_allHomepageTestimonialArgs = {
  filter: InputMaybe<HomepageTestimonialFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageTestimonialSortInput>>>;
};


type Query_allHomepageTestimonialListArgs = {
  filter: InputMaybe<HomepageTestimonialListFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HomepageTestimonialListSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allLayoutArgs = {
  filter: InputMaybe<LayoutFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<LayoutSortInput>>>;
};


type Query_allLayoutFooterArgs = {
  filter: InputMaybe<LayoutFooterFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<LayoutFooterSortInput>>>;
};


type Query_allLayoutHeaderArgs = {
  filter: InputMaybe<LayoutHeaderFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<LayoutHeaderSortInput>>>;
};


type Query_allNavItemArgs = {
  filter: InputMaybe<NavItemFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<NavItemSortInput>>>;
};


type Query_allNavItemGroupArgs = {
  filter: InputMaybe<NavItemGroupFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<NavItemGroupSortInput>>>;
};


type Query_allPageArgs = {
  filter: InputMaybe<PageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PageSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allSocialLinkArgs = {
  filter: InputMaybe<SocialLinkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SocialLinkSortInput>>>;
};


type Query_contentfulAboutHeroArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulAboutLeadershipArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<AboutProfileFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  subhead: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulAboutLogoListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  logos: InputMaybe<HomepageLogoFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulAboutPageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageBlockFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulAboutProfileArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  jobTitle: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulAboutStatArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  value: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulAboutStatListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<AboutStatFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulAssetArgs = {
  alt: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  fields: InputMaybe<ContentfulAssetFieldsFilterInput>;
  file: InputMaybe<JSONQueryOperatorInput>;
  filename: InputMaybe<StringQueryOperatorInput>;
  filesize: InputMaybe<IntQueryOperatorInput>;
  gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFile: InputMaybe<FileFilterInput>;
  mimeType: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  placeholderUrl: InputMaybe<StringQueryOperatorInput>;
  publicUrl: InputMaybe<StringQueryOperatorInput>;
  resize: InputMaybe<RemoteFileResizeFilterInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulAssetSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_contentfulContentTypeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  displayField: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
};


type Query_contentfulEntryArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulHomepageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageBlockFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageBenefitArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageBenefitListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageBenefitFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageCtaArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageFeatureArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageFeatureListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageFeatureFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageHeroArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  subhead: InputMaybe<StringQueryOperatorInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageLinkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageLinkGroupArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<ContentfulNavItemFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulHomepageLinkGroupSysFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulHomepageLogoArgs = {
  alt: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulHomepageLogoListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  logos: InputMaybe<HomepageLogoFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageProductArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageProductListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageProductFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageStatArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  value: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageStatListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageStatFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<HomepageImageFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageTestimonialArgs = {
  avatar: InputMaybe<HomepageImageFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  quote: InputMaybe<StringQueryOperatorInput>;
  source: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulHomepageTestimonialListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageTestimonialFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLayoutArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  footer: InputMaybe<LayoutFooterFilterInput>;
  header: InputMaybe<LayoutHeaderFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLayoutFooterArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  copyright: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  meta: InputMaybe<HomepageLinkFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  socialLinks: InputMaybe<SocialLinkFilterListInput>;
};


type Query_contentfulLayoutHeaderArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  cta: InputMaybe<HomepageLinkFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  navItems: InputMaybe<HeaderNavItemFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulLinkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulNavItemArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<HomepageImageFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  navItemType: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulNavItemGroupArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  navItemType: InputMaybe<StringQueryOperatorInput>;
  navItems: InputMaybe<NavItemFilterListInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulPageArgs = {
  body: InputMaybe<ContentfulPageBodyFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulPageSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulSocialLinkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  service: InputMaybe<SocialServiceQueryOperatorInput>;
  username: InputMaybe<StringQueryOperatorInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_headerNavItemArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  navItemType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_homepageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageBlockFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageBenefitArgs = {
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageBenefitListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageBenefitFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageBlockArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_homepageCtaArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageFeatureArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageFeatureListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageFeatureFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageHeroArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  subhead: InputMaybe<StringQueryOperatorInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageImageArgs = {
  alt: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageLinkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageLogoArgs = {
  alt: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_homepageLogoListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  logos: InputMaybe<HomepageLogoFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageProductArgs = {
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageProductListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageProductFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageStatArgs = {
  children: InputMaybe<NodeFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  label: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  value: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageStatListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageStatFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<HomepageImageFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageTestimonialArgs = {
  avatar: InputMaybe<HomepageImageFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  quote: InputMaybe<StringQueryOperatorInput>;
  source: InputMaybe<StringQueryOperatorInput>;
};


type Query_homepageTestimonialListArgs = {
  blocktype: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<HomepageTestimonialFilterListInput>;
  heading: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  kicker: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_layoutArgs = {
  children: InputMaybe<NodeFilterListInput>;
  footer: InputMaybe<LayoutFooterFilterInput>;
  header: InputMaybe<LayoutHeaderFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_layoutFooterArgs = {
  children: InputMaybe<NodeFilterListInput>;
  copyright: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  links: InputMaybe<HomepageLinkFilterListInput>;
  meta: InputMaybe<HomepageLinkFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  socialLinks: InputMaybe<SocialLinkFilterListInput>;
};


type Query_layoutHeaderArgs = {
  children: InputMaybe<NodeFilterListInput>;
  cta: InputMaybe<HomepageLinkFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  navItems: InputMaybe<HeaderNavItemFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_navItemArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<HomepageImageFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  navItemType: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_navItemGroupArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  navItemType: InputMaybe<StringQueryOperatorInput>;
  navItems: InputMaybe<NavItemFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_pageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<HomepageImageFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_socialLinkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  service: InputMaybe<SocialServiceQueryOperatorInput>;
  username: InputMaybe<StringQueryOperatorInput>;
};

/** Remote Interface */
type RemoteFile = {
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly mimeType: Scalars['String'];
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly width: Maybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type RemoteFileCropFocus =
  | 'bottom'
  | 'center'
  | 'edges'
  | 'entropy'
  | 'faces'
  | 'left'
  | 'right'
  | 'top';

type RemoteFileFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'outside';

type RemoteFileFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | 'png'
  | 'webp';

type RemoteFileLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type RemoteFilePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type RemoteFileResize = {
  readonly height: Maybe<Scalars['Int']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type RemoteFileResizeFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type RemoteFileResizeFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type RemoteFileResizeSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly author: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SocialLink = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly service: SocialService;
  readonly username: Scalars['String'];
};

type SocialLinkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SocialLinkEdge>;
  readonly group: ReadonlyArray<SocialLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SocialLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SocialLinkConnection_distinctArgs = {
  field: SocialLinkFieldSelector;
};


type SocialLinkConnection_groupArgs = {
  field: SocialLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SocialLinkConnection_maxArgs = {
  field: SocialLinkFieldSelector;
};


type SocialLinkConnection_minArgs = {
  field: SocialLinkFieldSelector;
};


type SocialLinkConnection_sumArgs = {
  field: SocialLinkFieldSelector;
};

type SocialLinkEdge = {
  readonly next: Maybe<SocialLink>;
  readonly node: SocialLink;
  readonly previous: Maybe<SocialLink>;
};

type SocialLinkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly service: InputMaybe<FieldSelectorEnum>;
  readonly username: InputMaybe<FieldSelectorEnum>;
};

type SocialLinkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly service: InputMaybe<SocialServiceQueryOperatorInput>;
  readonly username: InputMaybe<StringQueryOperatorInput>;
};

type SocialLinkFilterListInput = {
  readonly elemMatch: InputMaybe<SocialLinkFilterInput>;
};

type SocialLinkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SocialLinkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SocialLinkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SocialLink>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SocialLinkGroupConnection_distinctArgs = {
  field: SocialLinkFieldSelector;
};


type SocialLinkGroupConnection_groupArgs = {
  field: SocialLinkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SocialLinkGroupConnection_maxArgs = {
  field: SocialLinkFieldSelector;
};


type SocialLinkGroupConnection_minArgs = {
  field: SocialLinkFieldSelector;
};


type SocialLinkGroupConnection_sumArgs = {
  field: SocialLinkFieldSelector;
};

type SocialLinkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly service: InputMaybe<SortOrderEnum>;
  readonly username: InputMaybe<SortOrderEnum>;
};

type SocialService =
  | 'DISCORD'
  | 'FACEBOOK'
  | 'GITHUB'
  | 'INSTAGRAM'
  | 'LINKEDIN'
  | 'TWITCH'
  | 'TWITTER'
  | 'YOUTUBE';

type SocialServiceQueryOperatorInput = {
  readonly eq: InputMaybe<SocialService>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<SocialService>>>;
  readonly ne: InputMaybe<SocialService>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<SocialService>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type AboutHeroContentFragment = { readonly id: string, readonly heading: string | null, readonly text: string | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null };

type AboutLeadershipContentFragment = { readonly id: string, readonly kicker: string | null, readonly heading: string | null, readonly subhead: string | null, readonly content: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly jobTitle: string | null, readonly image: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null };

type AboutLogoListContentFragment = { readonly id: string, readonly heading: string | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null, readonly logos: ReadonlyArray<{ readonly id: string, readonly alt: string | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null };

type AboutStatListContentFragment = { readonly id: string, readonly content: ReadonlyArray<{ readonly id: string, readonly value: string | null, readonly label: string | null } | null> | null };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type HomePageQueryVariables = Exact<{ [key: string]: never; }>;


type HomePageQuery = { readonly homepage: { readonly id: string, readonly title: string | null, readonly description: string | null, readonly image: { readonly id: string, readonly url: string | null } | null, readonly blocks: ReadonlyArray<{ readonly id: string, readonly blocktype: string | null } | { readonly id: string, readonly blocktype: string | null } | { readonly id: string, readonly blocktype: string | null } | { readonly id: string, readonly blocktype: string | null } | { readonly id: string, readonly blocktype: string | null, readonly heading: string | null, readonly text: string | null, readonly content: ReadonlyArray<{ readonly id: string, readonly heading: string | null, readonly text: string | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null } | { readonly id: string, readonly blocktype: string | null, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly image: { readonly alt: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null } | { readonly id: string, readonly blocktype: string | null } | { readonly id: string, readonly blocktype: string | null, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly content: ReadonlyArray<{ readonly id: string, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null } | { readonly id: string, readonly blocktype: string | null, readonly kicker: string | null, readonly subhead: string | null, readonly text: string | null, readonly h1: string, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | { readonly id: string, readonly blocktype: string | null, readonly text: string | null, readonly logos: ReadonlyArray<{ readonly id: string, readonly alt: string | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null } | { readonly id: string, readonly blocktype: string | null, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly content: ReadonlyArray<{ readonly id: string, readonly heading: string | null, readonly text: string | null, readonly image: { readonly alt: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null } | null> | null } | { readonly id: string, readonly blocktype: string | null, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly image: { readonly id: string, readonly alt: string | null, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly icon: { readonly id: string, readonly alt: string | null, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly content: ReadonlyArray<{ readonly id: string, readonly value: string | null, readonly label: string | null, readonly heading: string | null } | null> | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null } | { readonly id: string, readonly blocktype: string | null, readonly kicker: string | null, readonly heading: string | null, readonly content: ReadonlyArray<{ readonly id: string, readonly quote: string | null, readonly source: string | null, readonly avatar: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null } | null> | null } | null };

type HomepageBenefitListContentFragment = { readonly id: string, readonly heading: string | null, readonly text: string | null, readonly content: ReadonlyArray<{ readonly id: string, readonly heading: string | null, readonly text: string | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null };

type HomepageCtaContentFragment = { readonly id: string, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly image: { readonly alt: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null };

type HomepageFeatureContentFragment = { readonly id: string, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null };

type HomepageFeatureListContentFragment = { readonly id: string, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly content: ReadonlyArray<{ readonly id: string, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null };

type HomepageHeroContentFragment = { readonly id: string, readonly kicker: string | null, readonly subhead: string | null, readonly text: string | null, readonly h1: string, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null };

type HomepageLogoListContentFragment = { readonly id: string, readonly text: string | null, readonly logos: ReadonlyArray<{ readonly id: string, readonly alt: string | null, readonly image: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null };

type HomepageProductListContentFragment = { readonly id: string, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly content: ReadonlyArray<{ readonly id: string, readonly heading: string | null, readonly text: string | null, readonly image: { readonly alt: string | null, readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null } | null> | null };

type HomepageStatListContentFragment = { readonly id: string, readonly kicker: string | null, readonly heading: string | null, readonly text: string | null, readonly image: { readonly id: string, readonly alt: string | null, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly icon: { readonly id: string, readonly alt: string | null, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly content: ReadonlyArray<{ readonly id: string, readonly value: string | null, readonly label: string | null, readonly heading: string | null } | null> | null, readonly links: ReadonlyArray<{ readonly id: string, readonly href: string | null, readonly text: string | null } | null> | null };

type HomepageTestimonialListContentFragment = { readonly id: string, readonly kicker: string | null, readonly heading: string | null, readonly content: ReadonlyArray<{ readonly id: string, readonly quote: string | null, readonly source: string | null, readonly avatar: { readonly id: string, readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly alt: string | null } | null } | null> | null };

type PageContentQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type PageContentQuery = { readonly page: { readonly id: string, readonly title: string | null, readonly slug: string, readonly description: string | null, readonly html: string, readonly image: { readonly id: string, readonly url: string | null } | null } | null };


}
